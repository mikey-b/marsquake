r0		RN	0
r1		RN	1
r2		RN	2
r3		RN	3
r4		RN	4
r5		RN	5
r6		RN	6
r7		RN	7
r8		RN	8
r9		RN	9
r10		RN	10
r11		RN	11
r12		RN	12
r13		RN	13
r14             RN      14
pc              RN      15

	AREA    |arm|, CODE


pwl_wimp_initialise_data
	DCD	&4b534154			; 'TASK'

pwl_wimp_initialise
	EXPORT	pwl_wimp_initialise

	; On entry,
	; r0 - last known wimp version
	; r1 - pointer to wimp task structure (PWL_TASK)
	; r2 - pointer to program description
	; r3 - pointer to a list of message numbers

	STMFD	r13!,{r0-r4,r14}

	MOV	r4,r1
	LDR	r1,pwl_wimp_initialise_data	; prep regs for SWI

	SWI	&400c0				; "Wimp_Initialise"

	STR	r0,[r4,#0]			; store current WIMP number
	STR	r1,[r4,#4]			; store task handle

	LDMFD	r13!,{r0-r4,pc}

pwl_wimp_createwindow
	EXPORT	pwl_wimp_createwindow

	; On extry, r0 = pointer to window block
	; On exit, returns window handle

	STMFD	r13!,{r1,r14}

	MOV	r1,r0

	SWI	&400c1				; "Wimp_CreateWindow"

	LDMFD	r13!,{r1,pc}

pwl_wimp_createicon
	EXPORT	pwl_wimp_createicon

	; On entry, r0 = pointer to icon creation data (wimp_icreate)
	; On exit, returns icon handle

	STMFD	r13!,{r1,r14}

	MOV	r1,r0
	MOV	r0,#0

	SWI	&400c2				; "Wimp_CreateIcon"

	LDMFD	r13!,{r1,pc}

pwl_wimp_deletewindow_data
	DCD	0

pwl_wimp_deletewindow
	EXPORT	pwl_wimp_deletewindow

	; On entry, r0 is window handle

	STMFD	r13!,{r0,r1,r14}

	STR	r0,pwl_wimp_deletewindow_data
	ADR	r1,pwl_wimp_deletewindow_data

	SWI	&400c3				; "Wimp_DeleteWindow"

	LDMFD	r13!,{r0,r1,pc}

pwl_wimp_deleteicon_data
	DCD	0
	DCD	0

pwl_wimp_deleteicon
	EXPORT	pwl_wimp_deleteicon

	; On entry,
	; r0 = window handle
	; r1 = icon handle

	STMFD	r13,{r0,r1,r14}

	STR	r0,pwl_wimp_deleteicon_data
	STR	r1,pwl_wimp_deleteicon_data+4

	ADR	r1,pwl_wimp_deleteicon_data

	SWI	&400c4				; "Wimp_DeleteIcon"

	LDMFD	r13!,{r0,r1,pc}

pwl_wimp_openwindow
	EXPORT	pwl_wimp_openwindow

	; On entry,
	; r0 = pointer to window open data (wimp_openstr)

	STMFD	r13!,{r0,r1,r14}

	MOV	r1,r0

	SWI	&400c5				; "Wimp_OpenWindow"

	LDMFD	r13!,{r0,r1,pc}

pwl_wimp_closewindow_data
	DCD	0

pwl_wimp_closewindow
	EXPORT	pwl_wimp_closewindow

	; On entry, r0 = window handle

	STMFD	r13!,{r0,r1,r14}

	STR	r0,pwl_wimp_closewindow_data
	ADR	r1,pwl_wimp_closewindow_data

	SWI	&400c6				; "Wimp_CloseWindow"

	LDMFD	r13!,{r0,r1,pc}

pwl_wimp_poll
	EXPORT	pwl_wimp_poll

	; on entry,
	; r0 = event mask
	; r1 = pointer to wimp event structure (wimp_eventstr)
        ;
	; on exit,
	; r0 = event code

	STMFD	r13!,{r1-r4,r14}

	MOV	r4,r1

	BIC	r0,r0,#1<<22			; Make sure bit 22 is clear
						; r3 doesn't contain poll word pointer

	ADD	r1,r1,#4

	SWI	&400c7				; "Wimp_Poll"

	STR	r0,[r4,#0]			; store event code

	LDMFD	r13!,{r1-r4,pc}

pwl_wimp_closedown
	EXPORT	pwl_wimp_closedown

	; on entry, r0 = pointer to (PWL_TASK) task description.

	STMFD	r13!,{r0,r1,r14}

	LDR	r0,[r0,#4]			; Get task handle
	LDR	r1,pwl_wimp_initialise_data	; 'TASK'

	SWI	&400dd				; "Wimp_CloseDown"

	LDMFD	r13!,{r0,r1,pc}

pwl_wimp_createmenu
	EXPORT	pwl_wimp_createmenu

	; on entry, r0 = pointer to menu block
	; r1,r2 = coordinate to open menu at

	STMFD	r13!,{r0-r3,r14}

	MOV	r3,r2
	MOV	r2,r1
	MOV	r1,r0				; Shuffle registers ready for SWI

	SWI	&400d4				; "Wimp_CreateMenu"

	LDMFD	r13!,{r0-r3,pc}

pwl_wimp_opentemplate
	EXPORT	pwl_wimp_opentemplate

	; On entry, r0 = pointer to filename string

	STMFD	r13!,{r0-r1,r14}

	MOV	r1,r0

	SWI	&400d9				; "Wimp_OpenTemplate"

	LDMFD	r13!,{r0-r1,pc}

pwl_wimp_closetemplate
	EXPORT	pwl_wimp_closetemplate

	STMFD	r13!,{r0,r14}

	SWI	&400da				; "Wimp_CloseTemplate"

	LDMFD	r13!,{r0,pc}

pwl_wimp_loadtemplate
	EXPORT	pwl_wimp_loadtemplate

	; On entry, r0 = wimp_template structure pointer
	; On exit, r0 = TRUE if entry found, FALSE otherwise

	STMFD	r13!,{r1-r6,r14}

	STMFD	r13!,{r0}			; hold pointer to the wimp_template struct safe

	LDMIA	r0,{r1-r6}			; Get swi details

	CMP	r4,#0				; No font reference array?
	MVNEQ	r4,#0				; if so, we need to pass -1, not 0

	SWI	&400db				; "Wimp_LoadTemplate"

	LDMFD	r13!,{r0}			; retrieve template pointer

	STMIA	r0,{r1-r6}			; write back results

	CMP	r6,#0				; was a match found?

	MOVEQ	r0,#0
	MOVNE	r0,#1

	LDMFD	r13!,{r1-r6,pc}

pwl_wimp_sendmessage
	EXPORT	pwl_wimp_sendmessage

	STMFD	r13!,{r0-r3,r14}

	SWI	&400e7				; "Wimp_SendMessage"

	LDMFD	r13!,{r0-r3,pc}

pwl_del_scrap_data
	DCB	"delete <Wimp$Scrap>"
	DCB	&0d

	ALIGN

pwl_del_scrap
	EXPORT	pwl_del_scrap

	STMFD	r13!,{r0,r14}

	ADR	r0,pwl_del_scrap_data
	SWI	&20005			; XOS_CLI

	LDMFD	r13!,{r0,pc}

pwl_wimp_forceredraw
	EXPORT	pwl_wimp_forceredraw

	STMFD	r13!,{r0-r4,r14}

	LDMIA	r0,{r0-r4}

	SWI	&400d1			; Wimp_ForceRedraw

	LDMFD	r13!,{r0-r4,pc}

pwl_wimp_seticonstate_data
	DCD	0
	DCD	0
	DCD	0
	DCD	0

pwl_wimp_seticonstate
	EXPORT	pwl_wimp_seticonstate

	; On entry,
	; r0 = window handle
	; r1 = icon handle
	; r2 = EOR word
	; r3 = clear word

	STMFD	r13!,{r0,r1,r4,r14}

	ADR	r4,pwl_wimp_seticonstate_data

	STMIA	r4,{r0-r3}

	MOV	r1,r4

	SWI	&400cd			; Wimp_SetIconState

	LDMFD	r13!,{r0,r1,r4,pc}

pwl_wimp_getwindowstate
	EXPORT	pwl_wimp_getwindowstate

	; On entry, r0 = pointer to window data block

	STMFD	r13!,{r0,r1,r14}

	MOV	r1,r0

	SWI	&400cb			; Wimp_GetWindowState

	LDMFD	r13!,{r0,r1,pc}

pwl_wimp_updatewindow
	EXPORT	pwl_wimp_updatewindow

	; On entry, r0 = addr of update block
	; On exit, r0 = continue? yes or no

	STMFD	r13!,{r1,r14}

	MOV	r1,r0

	SWI	&400c9			; Wimp_UpdateWindow

	LDMFD	r13!,{r1,pc}

pwl_wimp_redrawwindow
	EXPORT	pwl_wimp_redrawwindow

	; On entry, r0 = addr of update block containing window handle
	; On exit, r0 = continue? yes or no

	STMFD	r13!,{r1,r14}

	MOV	r1,r0

	SWI	&400c8			; Wimp_UpdateWindow

	LDMFD	r13!,{r1,pc}

pwl_wimp_getrectangle
	EXPORT	pwl_wimp_getrectangle

	; On entry, r0 = addr of update block containing window handle
	; On exit, r0 = continue? yes or no

	STMFD	r13!,{r1,r14}

	MOV	r1,r0

	SWI	&400ca			; Wimp_UpdateWindow

	LDMFD	r13!,{r1,pc}

pwl_wimp_dragbox
	EXPORT	pwl_wimp_dragbox

	; On entry, r0 = pointer to drag info block

	STMFD	r13!,{r0,r1,r14}

	MOV	r1,r0

	SWI	&400d0			; Wimp_DragBox

	LDMFD	r13!,{r0-r1,pc}

pwl_wimp_getpointerinfo
	EXPORT	pwl_wimp_getpointerinfo

	; on entry, r0 = pointer to mouse info block

	STMFD	r13!,{r0,r1,r14}

	MOV	r1,r0

	SWI	&400cf			; Wimp_GetPointerInfo

	LDMFD	r13!,{r0,r1,pc}

pwl_dragasprite_start
	EXPORT	pwl_dragasprite_start

	; On entry,
	; r0 = pointer to drag-a-sprite data

	STMFD	r13!,{r0-r4,r14}

	ADD	r4,r0,#16+12
	ADD	r3,r0,#12
	LDR	r2,[r0,#8]
	LDR	r1,[r0,#4]
	LDR	r0,[r0,#0]

	SWI	&42400			; DragASprite_Start

	LDMFD	r13!,{r0-r4,pc}

pwl_dragasprite_stop
	EXPORT	pwl_dragasprite_stop

	; No parameters

	SWI	&42401			; DragASprite_Stop

	MOV	pc,r14

pwl_wimp_transferblock
	EXPORT	pwl_wimp_transferblock

	; r0 is pointer to parameter block

	STMFD	r13!,{r0-r4,r14}

	LDR	r4,[r0,#16]		; buffer length
	LDR	r3,[r0,#12]		; destination buffer
	LDR	r2,[r0,#8]		; destination task handle
	LDR	r1,[r0,#4]		; source buffer
	LDR	r0,[r0,#0]		; source task handle

	SWI	&400f1			; Wimp_TransferBlock

	LDMFD	r13!,{r0-r4,pc}

pwl_wimp_setcaretposition
	EXPORT	pwl_wimp_setcaretposition

	; r0 is pointer to parameter block

	STMFD	r13!,{r0-r5,r14}

	LDMIA	r0,{r0-r5}

	SWI	&400d2

	LDMFD	r13!,{r0-r5,pc}

pwl_wimp_getcaretposition
	EXPORT	pwl_wimp_getcaretposition

	; r0 is pointer to parameter block

	STMFD	r13!,{r0-r1,r14}

	MOV	r1,r0

	SWI	&400d3			; Wimp_GetCaretPosition

	LDMFD	r13!,{r0-r1,pc}

pwl_os_readmodevariable
	EXPORT	pwl_os_readmodevariable

	; On entry,
	; r0 is screen mode or -1 for current mode
	; r1 is mode variable

	; On exit,
	; r0 = value of variable

	STMFD	r13!,{r1,r2,r14}

	SWI	&35			; OS_ReadModeVariable

	MOV	r0,r2

	LDMFD	r13!,{r1,r2,pc}

pwl_mouse_confine
	EXPORT	pwl_mouse_confine

	; On entry, r0 = data block

	STMFD	r13!,{r0,r1,r14}

	MOV	r1,r0
	MOV	r0,#21

	SWI	7			; OS_Word 21,x

	LDMFD	r13!,{r0,r1,pc}

pwl_wimp_setextent
	EXPORT	pwl_wimp_setextent

	; On entry,
	; r0 = window handle
	; r1 = pointer to wimp_box structure

	STMFD	r13!,{r0,r14}

	SWI	&400d7			; Wimp_SetExtent

	LDMFD	r13!,{r0,pc}

pwl_oscli
	EXPORT	pwl_oscli

	; On entry, r0 = pointer to CLI command string

	STMFD	r13!,{r14}

	SWI	5			; OS_CLI

	LDMFD	r13!,{pc}

pwl_wimp_getwindowoutline
	EXPORT	pwl_wimp_getwindowoutline

	; On entry, r0 = pointer to data block

	STMFD	r13!,{r0,r1,r14}

	MOV	r1,r0

	SWI	&400e0			; Wimp_GetWindowOutline

	LDMFD	r13!,{r0,r1,pc}

pwl_wimp_processkey
	EXPORT	pwl_wimp_processkey

	; On entry, r0 = key code

	STMFD	r13!,{r0,r14}

	SWI	&400dc			; Wimp_ProcessKey

	LDMFD	r13!,{r0,pc}

pwl_getwimpmode
	EXPORT	pwl_getwimpmode

	; On exit, returns current wimp mode

	MOV	r0,#1			; Read current wimp mode

	SWI	&400f2			; "Wimp_ReadSysInfo"

	MOV	pc,r14

pwl_setwimpmode
	EXPORT	pwl_setwimpmode

	; On entry, r0 contains new wimp mode

	STMFD	r13!,{r0,r14}

	SWI	&400e3			; "Wimp_SetMode"

	LDMFD	r13!,{r0,pc}

pwl_os_gbpb
	EXPORT pwl_os_gbpb

	; On entry r0 contains address of data block

	STMFD	r13!,{r0-r7,r14}

	MOV	r7,r0

	LDMIA	r7,{r0-r6}

	SWI	&c			; "OS_GBPB"

	STMIA	r7,{r0-r6}

	LDMFD	r13!,{r0-r7,pc}


		END
