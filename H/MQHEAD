/* Marsquake rebuilt header */

/* Total line count 30/12/96 : 10607 */

#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "swis.h"
#include "kernel.h"
#include <stdarg.h>

/* Our keyboard defs */
#include "keyboard.h"

/* Boolean definition */
#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

/* Use Mode 49 */
#define M49

#define NO_LOGFILE  /* See also defn in debug.c */
#define NO_PRINTF
/* #define ALLOW_EDITOR   if we require it probably never again!*/
/* #define ENABLE_SCREENDUMP if we require it */

#ifdef INSTANTIATE_VARS
#define EXTERN
#else
#define EXTERN extern
#endif

#ifdef M49
/* Mode 49 definitions */
#define MODENUM	    49
#define HRES	    320
#define VRES	    480
#else
/* Mode 13 definitions */
#define MODENUM     13
#define HRES        320
#define VRES	    256
#endif

#define VIS_TILES_H 19
#define VIS_TILES_V 13

#define abs(x)  ((x<0) ? (-x):(x))

#ifndef __DEFUBYTE
typedef unsigned char ubyte;
#define __DEFUBYTE
#endif
typedef unsigned char pixel;
typedef signed char sbyte;

/* Structure definitions */

typedef struct {
  int	xpos;
  int	ypos;
  ubyte	bombs;
  ubyte	flames;
  ubyte	extra_flags;
  ubyte	status;
  ubyte	ctrl_word;
  ubyte	anim_ctr;
  ubyte	colour;
  ubyte	lives;
  ubyte	timer;
  ubyte	bombs_layed;
  ubyte	sprite_num;
  char	name[12];
} player_ctrl_block;

typedef struct {
  int 	xpos;
  int 	ypos;
  ubyte	owner;
  ubyte	timer;
  ubyte	type;
  ubyte	status;
  ubyte	pushed_by;
  ubyte zpos;
  ubyte pad1;
  ubyte	pad2;
} bomb_ctrl_block;

typedef struct {
  ubyte	status;
  ubyte	sprite;
  ubyte extra1;
  ubyte extra2;
  ubyte blast;
  ubyte	blast_len;
  ubyte normal_stat;
  ubyte	overlay;
  ubyte	men_here;
  ubyte	blast_owner;
  ubyte	pad[6];
} floor_tile;

typedef struct {
  int	x;
  int	y;
  ubyte	type;
  ubyte	abilities;
  ubyte	status;
  ubyte	anim_ctr;
  ubyte	movement;
  ubyte	misc[3];
} enemy_ctrl_block;

typedef struct {
  ubyte	x;
  ubyte	y;
  ubyte	status;
  ubyte	anim_ctr;
} bonus_ctrl_block;

typedef struct {
  char *string;
  ubyte offset;
  ubyte timer;
  ubyte	changed;
  ubyte length;
} hud_message;

typedef struct {
  ubyte tile_desc;
  ubyte status;
  ubyte	sprite;
  ubyte properties;
} editor_tile;

typedef struct {
  int	width;
  int	height;
  pixel *gfx;
  int	pad;
} menu_sprite;

typedef struct {
  int	score;
  char	name[16];
} hscore_entry;

typedef struct {
  ubyte x;
  ubyte y;
} coord;

typedef struct {
  coord	pos;
  ubyte type;
  ubyte active;
} ed_nme;

typedef struct {
  ubyte    map[21][32];
  coord	   plr[4];
  ed_nme   nme[64];
  char	   name[32];
  ubyte	   battle;
  ubyte	   active;
} ED_LEVEL;

/* Constants */

#define DELAY_LOOP        0

#define ENEMY_COUNT       64
#define BONUS_COUNT	  128
#define	EXISTS		  1<<7
#define NME_PAUSE	  80

#define	NME_BOMB_EATER_GREEN  0
#define	NME_WANDERING_BOMB    1
#define NME_TARGETING_BOMB    2
#define NME_GHOST	      3
#define	NME_TARGETING_GHOST   4
#define NME_COMBINING_MONSTER 5
#define NME_SPRYT_H	      6
#define NME_SPRYT_V	      7
#define NME_SPRYT_LW	      8
#define NME_BOMB_EATER_RED    9

#define NME_MOVE_RANDOM     0
#define NME_MOVE_TARGET	    1
#define NME_MOVE_HORIZONTAL 2
#define NME_MOVE_VERTICAL   3
#define NME_MOVE_LEFT_WALL  4

#define NME_BLOW_UPPABLE    1
#define NME_CONTACT_DEADLY  2
#define NME_CAN_PASS_WALLS  4
#define NME_CAN_PASS_BOMBS  8
#define NME_WALK_HALF_SPEED 16

#define LEFT_ALIGN          (0<<4)
#define CENTRE		    (1<<4)
#define RIGHT_ALIGN	    (2<<4)
#define ICON		    (4<<4)
#define SYS_ICON	    (3<<4)
#define ALIGNMENT_MASK	    (3<<4)

#define BLACK               0
#define RED		    1
#define GREEN		    2
#define YELLOW		    3
#define BLUE		    4
#define MAGENTA		    5
#define CYAN		    6
#define WHITE		    7
#define HIGHLIGHT	    8

#define USER_QUIT           1
#define BATTLE_WON	    2
#define BATTLE_DRAWN	    3
#define PLAYER_DEAD	    4
#define LEVEL_COMPLETE	    5
#define BATTLE_LINK_LOST    6

#define BATTLE_MODE         1
#define SINGLE_PLAYER	    2

#define LEFT                1
#define RIGHT		    2
#define UP		    4
#define DOWN		    8
#define FIRE1		    16
#define FIRE2		    32

#define ED_LEFT1            1
#define ED_RIGHT1           2
#define ED_UP1              3
#define ED_DOWN1            4
#define ED_FIRE1_1          5
#define ED_FIRE2_1          6
#define ED_LEFT2            7
#define ED_RIGHT2           8
#define ED_UP2              9
#define ED_DOWN2            10
#define ED_FIRE1_2          11
#define ED_FIRE2_2          12

#define KEYBOARD            0
#define JOYSTICK	    1
#define UNKNOWN		    2

#define HUD_SCROLL_SPEED    10

#define EDIT_STANDARD       0
#define EDIT_BLOCKING       1
#define EDIT_ANIMATED	    2

#define ED_MODE_TILES       0
#define ED_MODE_ENEMIES     1
#define ED_MODE_MAIN_MENU   2
#define ED_MODE_LEV_NAME    3
#define ED_MODE_SAVE	    4
#define ED_MODE_LOAD	    5
#define ED_MODE_BLOKES	    6

#define ED_KEY_REPEAT_SPEED 8
#define ED_KEY_REPEAT_DELAY 64

#define LEV_FILE_MAP_CHUNK  0
#define LEV_FILE_NME_CHUNK  1
#define LEV_FILE_NAME_CHUNK 2
#define LEV_FILE_PIPE_CHUNK 3
#define LEV_FILE_END	    4
#define LEV_FILE_PLR_POS    5
#define LEV_FILE_GFX_CHUNK  6

#define END_OF_GAME_DELAY   50

#define HIGH_SCORE_ENTRIES  6

#define BLOCKAGE_SCORE      25
#define MULT_BLOCKAGE_SCORE 20

#define MENU_MUS_ENABLED    1
#define GAME_MUS_ENABLED    2
#define SOUND_FX_ENABLED    4

#define FUSE_SHORT          0
#define FUSE_MEDIUM	    1
#define FUSE_LONG	    2

#define MENU_TUNE           0
#define GAME_TUNE_1	    1

#define MODE_13             0
#define MODE_49             1
#define MODE_WIMP	    2

#define EPIS_ERTH           0
#define EPIS_WYND           1
#define EPIS_WRTA           2
#define EPIS_FYRE           3
#define EPIS_USER           4
#define EPIS_NONE           5

#define PLR_SLEEPING        0
#define PLR_HUMAN	    1
#define PLR_CPU		    2
#define PLR_REMOTE	    3


/* Variables/arrays */
EXTERN ED_LEVEL	          episode[16];
EXTERN ED_LEVEL		  user_episode[16];
EXTERN pixel		  user_gfx[71][16][16];
EXTERN ubyte		  user_1_plr_lev[16];
EXTERN ubyte		  user_battle_lev[16];
EXTERN ubyte		  user_1_plr_curr_lev;
EXTERN ubyte		  user_1_plr_lev_count;
EXTERN ubyte		  user_battle_lev_count;
EXTERN BOOL		  user_levels_loaded;
EXTERN pixel              misc_tiles[9][16][16];
EXTERN ubyte		  curr_episode;
EXTERN ubyte		  plr_type[4];

EXTERN floor_tile         floor_map[32][32];
EXTERN int	  	  floor_tiles[256*4*16];
EXTERN int		  scrmem;
EXTERN int	  	  scrmem_arena;
EXTERN pixel	  	  expl_gfx[140][16][16];
EXTERN int	  	  bexpl_gfx[20][48][24];
EXTERN int	  	  flour_gfx[20][48][24];
EXTERN bonus_ctrl_block   flour_array[64];
EXTERN int		  menu_icon_data[14*1024][2];
EXTERN menu_sprite	  menu_icon[26];
EXTERN int		  ctrl_word_table[16];
EXTERN pixel		  bonus_flip_gfx[16][16][16];
EXTERN pixel		  title_box[2][32][80]; /* 2? */
EXTERN pixel		  border[6][8][8];
EXTERN pixel		  bloke_gfx[64][4][16][16];
EXTERN pixel		  bomb_gfx[4][32][16][16];
EXTERN pixel		  enemy_gfx[8+4+4+5+5+4][4][16][16];
EXTERN bomb_ctrl_block	  bombs[64];
EXTERN player_ctrl_block  players[4];
EXTERN bonus_ctrl_block	  bonus_array[BONUS_COUNT];
EXTERN ubyte		  hud_pos[4];
EXTERN ubyte		  plr_hud[4];
EXTERN hud_message	  hud_mess[4];
EXTERN pixel		  small_font[7][148];
EXTERN enemy_ctrl_block	  nme_unit[ENEMY_COUNT];
EXTERN pixel		  small_bonus[6][8][8];
EXTERN char		  scorestring[16];
EXTERN int		  score;
EXTERN int		  blkscore;
EXTERN int		  roundscores[4];
EXTERN int		  old_menu_choice;
EXTERN ubyte		  mystery[4][2];

EXTERN int		  hflash;
EXTERN int		  hflashinc;

EXTERN int		  new_joy_data;
EXTERN int		  old_joy_data;
EXTERN int		  menu_joy_data;
EXTERN int		  joy_available;
EXTERN int		  fast_menu;
EXTERN BOOL		  played_intro;
EXTERN BOOL		  battle_vsync;

EXTERN int		  ticker;
EXTERN int		  screenbank[3];
EXTERN int		  global_y;
EXTERN int		  arena_depth;
EXTERN int		  level_empty;
EXTERN int		  exit_open;
EXTERN int		  frame_time;
EXTERN ubyte		  gfx_set_loaded;
EXTERN int		  global_audio_stat;
EXTERN int		  screenres;
EXTERN int		  currscrmode;
EXTERN int		  mode49_avail;

EXTERN char               level_name[32];
EXTERN int                max_jump_level;
EXTERN int		  game_sector;
EXTERN int		  game_level;
EXTERN int		  battle_lives;
EXTERN int		  battle_rounds;
EXTERN int		  battle_level;
EXTERN int		  global_game_type;
EXTERN int		  global_plrcount;
EXTERN int		  bonus_quant;
EXTERN int		  fuse_length_index;
EXTERN int		  fuse_length;

EXTERN int                delay_timer;

EXTERN ubyte              editor_map[32][32];
EXTERN ubyte		  ed_tile;
EXTERN ubyte		  ed_last_key;
EXTERN ubyte		  ed_last_key_timer;
EXTERN ubyte		  editor_mode;
EXTERN ubyte		  ed_active_nme_count;
EXTERN ubyte		  ed_flash;
EXTERN char		  ed_level_name[32];
EXTERN ubyte		  ed_gfx_set;

EXTERN char               txt_temp_str[32];
EXTERN char 		  txt_last_char;
EXTERN char		  txt_new_char;
EXTERN int  		  txt_key_repeat;
EXTERN int  		  txt_strpos;
EXTERN int  		  txt_flash;
EXTERN int  		  txt_finished;
EXTERN int		  txt_max_len;

EXTERN BOOL               serial_linked;
EXTERN BOOL		  serial_master;
EXTERN BOOL		  serial_broken;
EXTERN BOOL		  timed_out;
EXTERN BOOL		  serial_rnd_seed;

EXTERN BOOL               cheat_mode;

EXTERN hscore_entry       hscore_table[HIGH_SCORE_ENTRIES];
EXTERN ubyte		  hscore_order[HIGH_SCORE_ENTRIES];

#ifdef INSTANTIATE_VARS

ubyte  fuse_lengths[] = { 100, 175, 250 };

char   config_file[] = "<Mars$Dir>.Choices";
char   ser_config_file[] = "<Mars$Dir>.ChoicesSer";

char   level_path[] = "<Mars$Dir>.levdata.";
char*  sector_fname[] = {
  "erth",
  "wynd",
  "wrta",
  "fyre",
  "mult"
};

char*  msg[] = {
  "MAIN MENU",
  "single player game",
  "multiplayer battle",
  "instructions",
  "return to desktop",
  "NOT IMPLEMENTED",             /* 5 */
  "PRESS RETURN TO CONTINUE",
  "NO SCORE",
  "EXTRA BOMB",
  "GAME INSTRUCTIONS",
  "ONE PLAYER GAME",             /* 10 */
  "MULTIPLAYER GAME",
  "start from first level",
  "jump to level ?-? (?-?)",
  "return to main menu",
  "two players",                 /* 15 */
  "three players",
  "four players",
  "plr 1 : ",
  "plr 2 : ",
  "plr 3 : ",                /* 20 */
  "plr 4 : ",
  "start game",
  "previous menu",
  "number of lives : ??",
  "start level : ?",               /* 25 */
  "begin game",
  "player name",
  "player controls",
  "EXTRA FLAME",
  "change controls",             /* 30 */
  "player X",
  "PLAYER 1 DETAILS",
  "PLAYER 2 DETAILS",
  "PLAYER 3 DETAILS",
  "PLAYER 4 DETAILS",            /* 35 */
  "BONUS",
  "MEGA BOMB",
  "REBOUND BOMB",
  "FLOWER BOMB",
  "PUSH ABILITY",                /* 40 */
  "THROW ABILITY",
  "enter new name :",
  "control device : ",
  "keyboard",
  "joystick X",                  /* 45 */
  "mouse",
  "keyboard definitions",
  "LOST SOME FLAME",
  "LOST A BOMB",
  "editor",                      /* 50 */
  "edit floor",
  "edit enemies",
  "edit player positions",
  "enter level name",
  "save level data",             /* 55 */
  "enter filename for save",
  "file exists",
  "can't open file",
  "load level data",
  "enter filename for load",     /* 60 */
  "winner is first to ? games",
  "BATTLE GAME WON BY",
  "YOU'RE ALL DEAD!",
  "FOOLISH PEOPLE!",
  "let's try that again...",      /* 65 */
  "AUTO BOMB DROP",
  "MINI BOMBS",
  "NO BOMBS",
  "FUEL LEAK",
  "INVULNERABLE",                 /* 70 */
  "EXTRA LIFE",
  "AUTO BOMB EXPLODE",
  "NORMALITY RESTORED",
  "graphics set : ?",
  "<<",                           /* 75 */
  "main menu",
  ">>",
  "CLEARING SECTOR ?",
  "ENTERING LEVEL ?",
  "get ready",	                  /* 80 */
  "WYNND SECTOR",
  "air recycling",
  "ventillation",
  "atmosphere generation",
  "ERTH SECTOR",                  /* 85 */
  "entrance tunnels",
  "storage areas",
  "under construction",
  "WORTA SECTOR",
  "Waste Organisation",           /* 90 */
  "Recycling and Treatment",
  "Activities",
  "FiYRE SECTOR",
  "power generation",
  "power storage",                /* 95 */
  "atomic cores",
  "YOU'RE DEAD!",
  "with all those extra",
  "lives, as well.",
  "huh. now we'll have to",       /* 100 */
  "find someone else to help.",
  "new high score",
  "enter your name",
  "PAUSED",
  "ABANDON GAME",                 /* 105 */
  "CONTINUE GAME",
  "bonus count : ",
  "none",
  "a few",
  "average",                      /* 110 */
  "loads",
  "joystick interface detected",
  "joysticks not detected",
  "HIGH SCORES",
  "PLASMA PROTECTION SUIT",       /* 115 */
  "PLAY AGAIN?",
  "YES",
  "NO",
  "WELCOME TO MARSQUAKE",
  "options",                      /* 120 */
  "menu music : XXX",
  "game music : XXX",
  "sound effects : XXX",
  "on",
  "off",                          /* 125 */
  "GENERAL OPTIONS",
  "bomb fuses : XXXXXX",
  "short",
  "medium",
  "long",                         /* 130 */
  "return to game",
  "FURTHER OPTIONS",
  "screen mode : 13",
  "mode 13 only",
  "mode 49 available",             /* 135 */
  "fast menus : XXX",
  "start level : random",
  "off",
  "active",
  "cpu",                          /* 140 */
  "remote",
  "CPU CONTROLLED",
  "establish serial link",
  "master : break link",
  "slave : break link",           /* 145 */
  "attempting to contact",
  "slave machine",
  "contact made with slave",
  "can't contact slave",
  "SERIAL LINK",                  /* 150 */
  "waiting for master",
  "contact lost",
  "waiting for slave",
  "jump to user level ??",
  "user defined level",           /* 155 */
  "start user level : xx",
  "MULTIPLAYER MAIN MENU",

  "eol"
};

char secret_password[] = {
  'I' + 42,
  ' ' + 42,
  'A' + 42,
  'M' + 42,
  ' ' + 42,
  'O' + 42,
  'N' + 42,
  ' ' + 42,
  'A' + 42,
  ' ' + 42,
  'M' + 42,
  'I' + 42,
  'S' + 42,
  'S' + 42,
  'I' + 42,
  'O' + 42,
  'N' + 42,
  ' ' + 42,
  'F' + 42,
  'R' + 42,
  'O' + 42,
  'M' + 42,
  ' ' + 42,
  'G' + 42,
  'O' + 42,
  'D' + 42,
  0
};

char*  dem_msg[] = {
  "beta test version 2.11 for",
  "#3R31****************************",
  "",
  "(C) 1997 PAUL TAYLOR",
  "PRESS RETURN TO CONTINUE",
  NULL
};

char user_id[] = "#3R32********************************";

int    keyboard_def[4][8] = {
  255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255
};

int    game_keyboard_def[4][8] = {
  KB_Z,KB_X,KB_QUOTES,KB_SLASH,KB_RETURN,KB_SPACE,255,255,
  KB_PAD_1,KB_PAD_2,KB_PAD_6,KB_PAD_3,KB_PAD_PLUS,KB_PAD_POINT,255,255,
  255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255
};

int    menu_keyboard_def[4][8] = {
  KB_CURS_LEFT,KB_CURS_RIGHT,KB_CURS_UP,KB_CURS_DOWN,KB_RETURN,KB_ESCAPE,255,255,
  255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255
};

int    edit_keyboard_def[4][8] = {
  230,134,198,214,182,143,0,0,
  158,189,176,151,141,140,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0
};

int    flashcol[] = {
  8,128,130,168,170,202,248,251,
  251,248,202,170,168,130,128,8
};

ubyte  ctrl_word_type[16] = {
  KEYBOARD,
  KEYBOARD,
  KEYBOARD,
  KEYBOARD,
  JOYSTICK,
  JOYSTICK,
  JOYSTICK,
  JOYSTICK,
  UNKNOWN,
  UNKNOWN,
  UNKNOWN,
  UNKNOWN,
  UNKNOWN,
  UNKNOWN,
  UNKNOWN,
  UNKNOWN
};

pixel* normal_action[] = {
  &bloke_gfx[ 0][0][0][0],
  &bloke_gfx[ 1][0][0][0],
  &bloke_gfx[ 2][0][0][0],
  &bloke_gfx[ 3][0][0][0],
  &bloke_gfx[ 4][0][0][0],
  &bloke_gfx[ 5][0][0][0],
  &bloke_gfx[ 6][0][0][0],
  &bloke_gfx[ 7][0][0][0]
};

pixel* pickup_action[] = {
  &bloke_gfx[ 8][0][0][0],
  &bloke_gfx[ 9][0][0][0],
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[14][0][0][0],
  &bloke_gfx[15][0][0][0],
};

pixel* run_carrying[] = {
  &bloke_gfx[16][0][0][0],
  &bloke_gfx[17][0][0][0],
  &bloke_gfx[18][0][0][0],
  &bloke_gfx[19][0][0][0],
  &bloke_gfx[20][0][0][0],
  &bloke_gfx[21][0][0][0],
  &bloke_gfx[22][0][0][0],
  &bloke_gfx[23][0][0][0]
};

pixel* throw_action[] = {
  &bloke_gfx[24][0][0][0],
  &bloke_gfx[25][0][0][0],
  &bloke_gfx[26][0][0][0],
  &bloke_gfx[27][0][0][0],
  &bloke_gfx[28][0][0][0],
  &bloke_gfx[29][0][0][0],
  &bloke_gfx[30][0][0][0],
  &bloke_gfx[31][0][0][0]
};

pixel* dying_action[] = {
  &bloke_gfx[32][0][0][0],
  &bloke_gfx[33][0][0][0],
  &bloke_gfx[34][0][0][0],
  &bloke_gfx[35][0][0][0],
  &bloke_gfx[36][0][0][0],
  &bloke_gfx[37][0][0][0],
  &bloke_gfx[38][0][0][0],
  &bloke_gfx[39][0][0][0],

  &bloke_gfx[40][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[42][0][0][0],
  &bloke_gfx[43][0][0][0],
  &bloke_gfx[44][0][0][0],
  &bloke_gfx[45][0][0][0],
  &bloke_gfx[46][0][0][0],
  &bloke_gfx[47][0][0][0],

  &bloke_gfx[48][0][0][0],
  &bloke_gfx[49][0][0][0],
  &bloke_gfx[50][0][0][0],
  &bloke_gfx[51][0][0][0],
  &bloke_gfx[52][0][0][0],
  &bloke_gfx[53][0][0][0],
  &bloke_gfx[54][0][0][0],
  &bloke_gfx[55][0][0][0],

  &bloke_gfx[56][0][0][0],
  &bloke_gfx[57][0][0][0],
  &bloke_gfx[58][0][0][0],
  &bloke_gfx[59][0][0][0],
  &bloke_gfx[60][0][0][0],
  &bloke_gfx[61][0][0][0],
  &bloke_gfx[62][0][0][0],
  &bloke_gfx[63][0][0][0]
};

pixel* cough_action[] = {
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],  /* 8 */

  &bloke_gfx[10][0][0][0],
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],  /* 16 */

  &bloke_gfx[10][0][0][0],
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],  /* 24 */

  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],  /* 32 */

  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[10][0][0][0],  /* 40 */

  &bloke_gfx[10][0][0][0],
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],  /* 48 */

  &bloke_gfx[10][0][0][0],
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0],  /* 56 */

  &bloke_gfx[10][0][0][0],
  &bloke_gfx[10][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[11][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[12][0][0][0],
  &bloke_gfx[13][0][0][0],
  &bloke_gfx[13][0][0][0]   /* 64 */
};

pixel* stunned_action[] = {
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],

  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],

  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],

  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],

  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],

  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],

  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[41][0][0][0],
  &bloke_gfx[40][0][0][0],

  &bloke_gfx[39][0][0][0],
  &bloke_gfx[38][0][0][0],
  &bloke_gfx[37][0][0][0],
  &bloke_gfx[36][0][0][0],
  &bloke_gfx[35][0][0][0],
  &bloke_gfx[34][0][0][0],
  &bloke_gfx[33][0][0][0],
  &bloke_gfx[32][0][0][0]
};

pixel** action_table[] = {
  normal_action,
  pickup_action,
  run_carrying,
  throw_action,
  stunned_action,
  dying_action,
  cough_action
};

pixel  plrpals[5][256] = {
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
   48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
   80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
   96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,
  112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,
  128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,
  144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
  160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,
  176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
  192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
  208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
  224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
  240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,

    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
   48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
   80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
   96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,
  112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,
  128,129,130,131,132,133,134,135, 18, 19, 52, 53,140,141,142,143,
  144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
  160,161,162,163,164,165,166,167,168,169, 54, 55,172,173,174,175,
  176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
  192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
  208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
  224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
  240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,

    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
   48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
   80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
   96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,
  112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,
  128,129,130,131,132,133,134,135, 34, 35, 64, 65,140,141,142,143,
  144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
  160,161,162,163,164,165,166,167,168,169, 66, 67,172,173,174,175,
  176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
  192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
  208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
  224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
  240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,

    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
   48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
   80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
   96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,
  112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,
  128,129,130,131,132,133,134,135,156,157,158,159,140,141,142,143,
  144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
  160,161,162,163,164,165,166,167,168,169,190,191,172,173,174,175,
  176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
  192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
  208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
  224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
  240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,

    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
   48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
   80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
   96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,
  112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,
  128,129,130,131,132,133,134,135,208,209,210,211,140,141,142,143,
  144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
  160,161,162,163,164,165,166,167,168,169,252,253,172,173,174,175,
  176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
  192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
  208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
  224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
  240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
};

pixel* flip_bonus[] = {
  &bonus_flip_gfx[ 6][0][0],
  &bonus_flip_gfx[ 5][0][0],
  &bonus_flip_gfx[ 4][0][0],
  &bonus_flip_gfx[ 3][0][0],
  &bonus_flip_gfx[ 2][0][0],
  &bonus_flip_gfx[ 1][0][0],
  &bonus_flip_gfx[ 0][0][0],
  &bonus_flip_gfx[14][0][0],

  &bonus_flip_gfx[ 0][0][0],
  &bonus_flip_gfx[ 1][0][0],
  &bonus_flip_gfx[ 2][0][0],
  &bonus_flip_gfx[ 3][0][0],
  &bonus_flip_gfx[ 4][0][0],
  &bonus_flip_gfx[ 5][0][0],
  &bonus_flip_gfx[ 6][0][0],
  &bonus_flip_gfx[14][0][0],

  &bonus_flip_gfx[13][0][0],
  &bonus_flip_gfx[12][0][0],
  &bonus_flip_gfx[11][0][0],
  &bonus_flip_gfx[10][0][0],
  &bonus_flip_gfx[ 9][0][0],
  &bonus_flip_gfx[ 8][0][0],
  &bonus_flip_gfx[ 7][0][0],
  &bonus_flip_gfx[14][0][0],

  &bonus_flip_gfx[ 7][0][0],
  &bonus_flip_gfx[ 8][0][0],
  &bonus_flip_gfx[ 9][0][0],
  &bonus_flip_gfx[10][0][0],
  &bonus_flip_gfx[11][0][0],
  &bonus_flip_gfx[12][0][0],
  &bonus_flip_gfx[13][0][0],
  &bonus_flip_gfx[14][0][0]
};

ubyte  font_wid[] = {
  6, 5, 9,15,14,14,14, 5, 6, 6,16,10, 5,10, 5, 9,
 12, 7,14,14,14,14,14,14,14,14, 4, 5, 9, 9, 9,14,
 12,14,14,14,14,14,10,14,14, 5, 5,14,14,18,14,14,
 14,14,14,14, 7,14,14,18,14,14,14, 8, 9, 8,12,12,
 12,10,10,10,10,10, 7,10,10, 4, 4,10,10,13,10,10,
 10,10,10,10, 5,10,10,13,10,10,10, 8, 8, 8, 8,12
};

pixel* nme_spryt_anim[] = {
  &enemy_gfx[ 0][0][0][0],
  &enemy_gfx[ 1][0][0][0],
  &enemy_gfx[ 2][0][0][0],
  &enemy_gfx[ 3][0][0][0],
  &enemy_gfx[ 4][0][0][0],
  &enemy_gfx[ 5][0][0][0],
  &enemy_gfx[ 6][0][0][0],
  &enemy_gfx[ 7][0][0][0]
};

pixel* nme_eater_anim[] = {
  &enemy_gfx[ 8][0][0][0],
  &enemy_gfx[ 8][0][0][0],
  &enemy_gfx[ 9][0][0][0],
  &enemy_gfx[ 9][0][0][0],
  &enemy_gfx[10][0][0][0],
  &enemy_gfx[10][0][0][0],
  &enemy_gfx[11][0][0][0],
  &enemy_gfx[11][0][0][0]
};

pixel* nme_ghost_anim[] = {
  &enemy_gfx[12][0][0][0],
  &enemy_gfx[12][0][0][0],
  &enemy_gfx[13][0][0][0],
  &enemy_gfx[13][0][0][0],
  &enemy_gfx[14][0][0][0],
  &enemy_gfx[14][0][0][0],
  &enemy_gfx[15][0][0][0],
  &enemy_gfx[15][0][0][0]
};

pixel* nme_bomb_anim[] = {
  &enemy_gfx[16][0][0][0],
  &enemy_gfx[17][0][0][0],
  &enemy_gfx[18][0][0][0],
  &enemy_gfx[17][0][0][0],
  &enemy_gfx[16][0][0][0],
  &enemy_gfx[19][0][0][0],
  &enemy_gfx[20][0][0][0],
  &enemy_gfx[19][0][0][0]
};

pixel* nme_death_anim[] = {
  &enemy_gfx[21][0][0][0],
  &enemy_gfx[21][1][0][0],
  &enemy_gfx[21][2][0][0],
  &enemy_gfx[21][3][0][0],

  &enemy_gfx[22][0][0][0],
  &enemy_gfx[22][1][0][0],
  &enemy_gfx[22][2][0][0],
  &enemy_gfx[22][3][0][0],

  &enemy_gfx[23][0][0][0],
  &enemy_gfx[23][1][0][0],
  &enemy_gfx[23][2][0][0],
  &enemy_gfx[23][3][0][0],

  &enemy_gfx[24][0][0][0],
  &enemy_gfx[24][1][0][0],
  &enemy_gfx[24][2][0][0],
  &enemy_gfx[24][3][0][0],

  &enemy_gfx[25][0][0][0],
  &enemy_gfx[25][1][0][0],
  &enemy_gfx[25][2][0][0],
  &enemy_gfx[25][3][0][0]
};

pixel* nme_eater2_anim[] = {
  &enemy_gfx[26][0][0][0],
  &enemy_gfx[26][0][0][0],
  &enemy_gfx[27][0][0][0],
  &enemy_gfx[27][0][0][0],
  &enemy_gfx[28][0][0][0],
  &enemy_gfx[28][0][0][0],
  &enemy_gfx[29][0][0][0],
  &enemy_gfx[29][0][0][0]
};

pixel** enemy_anims[] = {
  nme_eater2_anim,
  nme_bomb_anim,
  nme_bomb_anim,
  nme_ghost_anim,
  nme_ghost_anim,
  nme_eater_anim,
  nme_spryt_anim,
  nme_spryt_anim,
  nme_spryt_anim,
  nme_eater_anim
};

/* Tile descriptions for editor */
char* tile_names[] = {
  "FAN",
  "HORIZONTAL PIPE SECTION",
  "VERTICAL PIPE SECTION",
  "PIPE INTERSECTION",
  "PIPE BEND TOP TO LEFT",
  "PIPE BEND BOTTOM TO LEFT",
  "PIPE BEND TOP TO RIGHT",
  "PIPE BEND BOTTOM TO RIGHT",
  "PIPE OPENING LEFT",
  "PIPE OPENING RIGHT",
  "PIPE OPENING TOP",
  "PIPE OPENING BOTTOM",
  "EMPTY FLOOR",
  "LEFT CONVEYOR",
  "RIGHT CONVEYOR",
  "UP CONVEYOR",
  "DOWN CONVEYOR",
  "REMOVEABLE BLOCKAGE",
  "EXTRA FLAME BONUS",
  "EXTRA BOMB BONUS",
  "MEGA BOMB BONUS",
  "REBOUND BOMB BONUS",
  "FLOWER BOMB BONUS",
  "PUSH ABILITY BONUS",
  "THROW ABILITY BONUS",
  "MYSTERY BONUS",
  "PLASMA PROTECTION SUIT BONUS",
  "FUEL SPILLAGE",
  "PIPEWORKS",
  "BALCONY TOP HORIZONTAL SECTION",
  "BALCONY TOP RIGHT CORNER",
  "BALCONY RIGHT SECTION",
  "BALCONY BOTTOM RIGHT CORNER",
  "BALCONY BOTTOM HORIZONTAL SECTION",
  "BALCONY BOTTOM LEFT CORNER",
  "BALCONY LEFT SECTION",
  "BALCONY TOP LEFT CORNER",
  "CONSOLE TOP HORIZONTAL SECTION",
  "CONSOLE TOP RIGHT CORNER",
  "CONSOLE RIGHT SECTION",
  "CONSOLE BOTTOM RIGHT CORNER",
  "CONSOLE BOTTOM HORIZONTAL SECTION",
  "CONSOLE BOTTOM LEFT CORNER",
  "CONSOLE LEFT SECTION",
  "CONSOLE TOP LEFT CORNER",
  "EXIT FORCE FIELD LEFT GENERATOR",
  "EXIT FORCE FIELD RIGHT GENERATOR",
  "EXIT FORCE FIELD BEAM",
  "BALCONY OUTER TOP RIGHT CORNER",
  "BALCONY OUTER BOT RIGHT CORNER",
  "BALCONY OUTER BOTTOM LEFT CORNER",
  "BALCONY OUTER TOP LEFT CORNER",
  "VENTILATION SHAFT",
  "CONSOLE TOP PANEL",
  "CORE UNIT",
  "HARD SPACE",
  "EXTRA"
};

char *enemy_names[] = {
  "BOMB EATER GREEN",
  "WANDERING BOMB",
  "TARGETING BOMB",
  "WANDERING GHOST",
  "TARGETING GHOST",
  "COMBINING MONSTER",
  "HORIZONTAL SPRYT",
  "VERTICAL SPRYT",
  "LEFT WALL SPRYT",
  "BOMB EATER RED"
};

int enemy_scores[] = {
  300,
  100,
  200,
  150,
  300,
  500,
  400,
  400,
  400,
  100
};

char *enum_editor_modes[] = {
  "EDITING FLOOR TILES",
  "EDITING ENEMIES",
  "MAIN MENU",
  "ENTERING LEVEL NAME",
  "SAVING LEVEL DATA",
  "LOADING LEVEL DATA",
  "EDITING PLAYER START POSITIONS"
};

ubyte enemy_lib[16] = {
  NME_BOMB_EATER_RED,
  NME_WANDERING_BOMB,
  NME_TARGETING_BOMB,
  NME_GHOST,
  NME_TARGETING_GHOST,
  NME_SPRYT_H,
  NME_SPRYT_V,
  NME_SPRYT_LW,
  NME_BOMB_EATER_GREEN,
  255
};

editor_tile tile_lib[] = {
 /* 0 : CORE UNIT */
 0,
 1,
 1,
 EDIT_BLOCKING,

 /* 1 : HORIZONTAL PIPE SECTION */
 1,
 1,
 3,
 EDIT_BLOCKING,

 /* 2 : VERTICAL PIPE SECTION */
 2,
 1,
 4,
 EDIT_BLOCKING,

 /* 3 : PIPE INTERSECTION */
 3,
 1,
 2,
 EDIT_BLOCKING,

 /* 4 : PIPE BEND TOP TO LEFT */
 4,
 1,
 9,
 EDIT_BLOCKING,

 /* 5 : PIPE BEND BOTTOM TO LEFT */
 5,
 1,
 10,
 EDIT_BLOCKING,

 /* 6 : PIPE BEND TOP TO RIGHT */
 6,
 1,
 11,
 EDIT_BLOCKING,

 /* 7 : PIPE BEND BOTTOM TO RIGHT */
 7,
 1,
 12,
 EDIT_BLOCKING,

 /* 8 : PIPE OPENING LEFT */
 8,
 24,
 5,
 EDIT_BLOCKING,

 /* 9 : PIPE OPENING RIGHT */
 9,
 25,
 6,
 EDIT_BLOCKING,

 /* 10 : PIPE OPENING TOP */
 10,
 26,
 7,
 EDIT_BLOCKING,

 /* 11 : PIPE OPENING BOTTOM */
 11,
 27,
 8,
 EDIT_BLOCKING,

 /* 12 : EMPTY FLOOR */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 13 : LEFT CONVEYOR */
 13,
 144,
 13,
 EDIT_ANIMATED,

 /* 14 : RIGHT CONVEYOR */
 14,
 145,
 17,
 EDIT_ANIMATED,

 /* 15 : UP CONVEYOR */
 15,
 146,
 21,
 EDIT_ANIMATED,

 /* 16 : DOWN CONVEYOR */
 16,
 147,
 25,
 EDIT_ANIMATED,

 /* 17 : REMOVEABLE BLOCKAGE */
 17,
 0,
 29,
 EDIT_BLOCKING,

 /* 18 : REMOVEABLE BLOCKAGE */
 17,
 0,
 30,
 EDIT_BLOCKING,

 /* 19 : REMOVEABLE BLOCKAGE */
 17,
 0,
 31,
 EDIT_BLOCKING,

 /* 20 : REMOVEABLE BLOCKAGE */
 17,
 0,
 32,
 EDIT_BLOCKING,

 /* 21 : EXTRA FLAME BONUS */
 18,
 129,
 53,
 EDIT_STANDARD,

 /* 22 : EXTRA BOMB BONUS */
 19,
 130,
 54,
 EDIT_STANDARD,

 /* 23 : MEGA BOMB BONUS */
 20,
 131,
 55,
 EDIT_STANDARD,

 /* 24 : REBOUND BOMB BONUS */
 21,
 132,
 56,
 EDIT_STANDARD,

 /* 25 : FLOWER BOMB BONUS */
 22,
 133,
 57,
 EDIT_STANDARD,

 /* 26 : PUSH ABILITY BONUS */
 23,
 134,
 58,
 EDIT_STANDARD,

 /* 27 : THROW ABILITY BONUS */
 24,
 135,
 59,
 EDIT_STANDARD,

 /* 28 : MYSTERY BONUS */
 25,
 136,
 60,
 EDIT_STANDARD,

 /* 29 : PLASMA PROTECTION SUIT BONUS */
 26,
 137,
 61,
 EDIT_STANDARD,

 /* 30 : FUEL SPILLAGE */
 27,
 148,
 62,
 EDIT_STANDARD,

 /* 31 : PIPEWORKS */
 28,
 1,
 63,
 EDIT_BLOCKING,

 /* 32 : BALCONY TOP HORIZONTAL SECTION */
 29,
 1,
 204,
 EDIT_BLOCKING,

 /* 33 : BALCONY TOP RIGHT CORNER */
 30,
 1,
 205,
 EDIT_BLOCKING,

 /* 34 : BALCONY RIGHT SECTION */
 31,
 1,
 206,
 EDIT_BLOCKING,

 /* 35 : BALCONY BOTTOM RIGHT CORNER */
 32,
 1,
 207,
 EDIT_BLOCKING,

 /* 36 : BALCONY BOTTOM HORIZONTAL SECTION */
 33,
 1,
 208,
 EDIT_BLOCKING,

 /* 37 : BALCONY BOTTOM LEFT CORNER */
 34,
 1,
 209,
 EDIT_BLOCKING,

 /* 38 : BALCONY LEFT SECTION */
 35,
 1,
 210,
 EDIT_BLOCKING,

 /* 39 : BALCONY TOP LEFT CORNER */
 36,
 1,
 211,
 EDIT_BLOCKING,

 /* 40 : CONSOLE TOP HORIZONTAL SECTION */
 37,
 1,
 212,
 EDIT_BLOCKING,

 /* 41 : CONSOLE TOP RIGHT CORNER */
 38,
 1,
 213,
 EDIT_BLOCKING,

 /* 42 : CONSOLE RIGHT SECTION */
 39,
 1,
 214,
 EDIT_BLOCKING,

 /* 43 : CONSOLE BOTTOM RIGHT CORNER */
 40,
 1,
 215,
 EDIT_BLOCKING,

 /* 44 : CONSOLE BOTTOM HORIZONTAL SECTION */
 41,
 1,
 216,
 EDIT_BLOCKING,

 /* 45 : CONSOLE BOTTOM LEFT CORNER */
 42,
 1,
 217,
 EDIT_BLOCKING,

 /* 46 : CONSOLE LEFT SECTION */
 43,
 1,
 218,
 EDIT_BLOCKING,

 /* 47 : CONSOLE TOP LEFT CORNER */
 44,
 1,
 219,
 EDIT_BLOCKING,

 /* 48 : EXIT FORCE FIELD LEFT GENERATOR */
 45,
 1,
 220,
 EDIT_BLOCKING,

 /* 49 : EXIT FORCE FIELD RIGHT GENERATOR */
 46,
 1,
 221,
 EDIT_BLOCKING,

 /* 50 : EXIT FORCE FIELD BEAM */
 47,
 2,
 222,
 EDIT_ANIMATED,

 /* 51 : BALCONY OUTER TOP RIGHT CORNER */
 48,
 1,
 226,
 EDIT_BLOCKING,

 /* 52 : BALCONY OUTER BOT RIGHT CORNER */
 49,
 1,
 227,
 EDIT_BLOCKING,

 /* 53 : BALCONY OUTER BOTTOM LEFT CORNER */
 50,
 1,
 228,
 EDIT_BLOCKING,

 /* 54 : BALCONY OUTER TOP LEFT CORNER */
 51,
 1,
 229,
 EDIT_BLOCKING,

 /* 55 : VENTILATION SHAFT */
 52,
 1,
 230,
 EDIT_BLOCKING,

 /* 56 : CONSOLE TOP PANEL */
 53,
 1,
 231,
 EDIT_BLOCKING,

 /* 57 : CORE UNIT */
 54,
 1,
 232,
 EDIT_BLOCKING,

 /* 58 : EMPTY FLOOR (no bonuses allowed) */
 55,
 128,
 0,
 EDIT_STANDARD,

 /* 59 */
 54,
 1,
 235,
 EDIT_BLOCKING,

 /* 60 : Grating */
 54,
 150,
 236,
 EDIT_STANDARD,

 /* 61 : EMPTY FLOOR (no bonuses allowed) */
 0,
 1,
 237,
 EDIT_BLOCKING,

 /* 62 : EMPTY FLOOR (no bonuses allowed) */
 0,
 1,
 238,
 EDIT_BLOCKING,

 /* 63 : EMPTY FLOOR (no bonuses allowed) */
 0,
 1,
 239,
 EDIT_BLOCKING,

 /* 64 : player 1 */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 65 : player 2 */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 66 : player 3 */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 67 : player 4 */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 68 : eater red */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 69 : eater green */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 70 : wandering ghost */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 71 : targeting ghost */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 72 : wandering bomb */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 73 : targeting bomb */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 74 : horizontal spryt */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 75 : vertical spryt */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* 76 : wall tracking spryt */
 12,
 128,
 0,
 EDIT_STANDARD,

 /* Last empty entry */
 0,
 0,
 0,
 255
};


#else
extern char               config_file[];
extern char               ser_config_file[];
extern char*              mult_level_fname[];
extern char   		  level_path[];
extern char*  		  sector_fname[];
extern int                keyboard_def[4][8];
extern int    		  game_keyboard_def[4][8];
extern int    		  menu_keyboard_def[4][8];
extern int    		  edit_keyboard_def[4][8];
extern pixel**		  action_table[];
extern pixel		  plrpals[5][256];
extern pixel*		  flip_bonus[];
extern ubyte		  font_wid[256];
extern pixel**		  enemy_anims[];
extern pixel* 		  nme_death_anim[];
extern int		  flashcol[];
extern char*		  msg[];
extern char*  		  dem_msg[];
extern ubyte  		  ctrl_word_type[16];
extern editor_tile 	  tile_lib[];
extern ubyte		  enemy_lib[16];
extern char* 		  tile_names[];
extern char*		  enemy_names[];
extern int 		  enemy_scores[];
extern char*		  enum_editor_modes[];
extern ubyte		  fuse_lengths[];
extern char 		  secret_password[];
#endif

/* Routine prototypes */

/* ARM routines */
extern void	draw_floor(int global_y, int floorsize, int floor_gfx);
extern void	H_draw_floor(int global_y, int floorsize, int floor_gfx);
extern void	draw_adv_exp(int global_y);
extern void	H_draw_adv_exp(int global_y);
extern void	draw_flour_exp(int global_y);
extern void	H_draw_flour_exp(int global_y);
extern void	draw_icon(int icon, int x, int y);
extern void	H_draw_icon(int icon, int x, int y);
extern void	read_keyboard(int plr1, int plr2, int plr3, int plr4);
extern void	read_ctrl_keys(void);
extern void	drawaman(int global_y, player_ctrl_block *plr);
extern void	H_drawaman(int global_y, player_ctrl_block *plr);
extern void	drawabomb(int global_y, bomb_ctrl_block *bomb);
extern void	H_drawabomb(int global_y, bomb_ctrl_block *bomb);
extern void	draw_all_bombs(int global_y);
extern void	H_draw_all_bombs(int global_y);
extern void	man_handle(void);
extern int	rnd(void);
extern int	rnd_unsync(void);
extern void	bomb_handle(void);
extern void	grid_scan(void);
extern void	drawabonus(int global_y, bonus_ctrl_block *bonus);
extern void	H_drawabonus(int global_y, bonus_ctrl_block *bonus);
extern void	draw_all_bonuses(int global_y);
extern void	H_draw_all_bonuses(int global_y);
extern void	draw_small_string(char *string, int x, int y);
extern void	draw_string(char *string, int x, int y, int col);
extern void	H_draw_string(char *string, int x, int y, int col);
extern void	draw_char(char c, int x, int y, int col);
extern void	H_draw_char(char c, int x, int y, int col);
extern void	draw_string_highlight(char *string, int x, int y, int col);
extern void	H_draw_string_highlight(char *string, int x, int y, int col);
extern int	get_string_width(char *string);
extern void	draw_menu_screen(void);
extern void	H_draw_menu_screen(void);
extern void	draw_black_screen(void);
extern void	H_draw_black_screen(void);
extern void	drawanenemy(int global_y, enemy_ctrl_block *enemy);
extern void	H_drawanenemy(int global_y, enemy_ctrl_block *enemy);
extern void	draw_all_enemies(int global_y);
extern void	H_draw_all_enemies(int global_y);
extern void	scrdump(void);
extern void     kbd_claim(void);
extern void     kbd_release(void);
extern void	clear_keyboard(void);
extern int	scan_keyboard(void);
extern void	read_joystick(int joystick, int ctrl_word_num);
extern void	read_mouse(void);
extern int	dsym_load(char *fname);
extern void	dsym_playinstr(int instr_num);
extern void	dsym_start_song_cold(void);
extern void	dsym_start_song_warm(int song);
extern int	dsym_monitor_volume(int target_vol);
extern void	dsym_stop_song(void);
extern void	dsym_get_stereo_positions(void);
extern void	dsym_set_stereo_for_menus(void);
extern void	dsym_set_stereo_for_game(void);
extern void	dsym_time_to_die(void);
extern void	dsym_resetparams(void);
extern void	scrblanker_off(void);
extern void     nobble_gameon(void);
extern void	mode_49_scale(void);

extern void     osbyte(int r0, int r1, int r2);
extern void	readscr(int scb);
extern void	resetscr(void);
extern void	setmode(int mode);

extern void     slink_init(void);
extern void 	slink_close(void);
extern BOOL  	slink_input_buffer_empty(void);
extern BOOL  	slink_output_buffer_empty(void);
extern BOOL	slink_send_byte(ubyte c);
extern ubyte 	slink_read_byte(void);
extern void	slink_flush_input_buffer(void);
extern void	slink_flush_output_buffer(void);

extern BOOL     is_escape_condition(void);
extern void	ack_escape_condition(void);

extern void     launch_help(void);

extern int      draw_floor_data[];
extern int	bonus_debug[];
extern ubyte	misc_ctrl_keys[];
extern int	read_mouse_dir[];
extern int	comp_char_data[];
extern int 	rnd_seed;

/* In prog.c */

void   mqprint(char *string, int x, int y, int alignment, int col);
void   scrprintf(int x, int y, int col, char *FormatString, ...);
void   read_menu_joy(void);
void   swapscreen(void);
void   beep(void);
int    remap_colour(int source_col, int pal);
void   init_bloke_gfx(void);
void   init_bomb_gfx(void);
void   describe_bombs(void);
void   init_bonuses(void);
int    game(int game_type);
void   set_keys_for_menus(void);
void   set_keys_for_game(void);
void   set_data_for_game(void);
void   set_data_for_menus(void);
int    build_mask(int val);
void   init_gfx(void);
void   test_gfx(void);
void   init_map(void);
void   check_map(void);
int    getw(FILE *fptr);
void   putw(int v, FILE *fptr);
void   init_blokes(void);
void   prepare_players(int starting_lives);
void   player_ready_for_next_level(void);
void   init_bombs(void);
int    joy_detect(void);
void   load_bgnd_gfx(ubyte set);
void   change_mode(int targ_mode);
void   check_mode(void);

/* In menus.c */
void   demo_menu(void);
void   main_menu(void);
void   options_menu(int in_game);
void   single_player_game(void);
void   game_instructions(void);
int    begin_new_game(int num_of_players,int start_level,int game_type);
void   choose_control_method(int player);
void   construct_game_screen(int players_here, int cold);
int    battle_game(void);
void   multiplayer_options(int player_num);
void   mult_opt_cpu(int player_num);
int    prepare_multiplayer_game(int num_ofplayers);
int    prepare_multiplayer_game_slave(int num_of_players);
void   update_hud_mess(void);
void   draw_hud_mess(void);
void   new_hud_mess(char *string, int plr);
void   enter_name(int player_num);
void   key_defs(int player_num);
void   text_entry_init(char *string, int x, int y, int align, int max);
int    text_entry_maintain(void);
void   text_entry_end(char *string);
void   load_game_level(int sector, int level);
void   init_high_scores(void);
void   add_new_score(int score, char *name);
void   display_high_scores(int timed);
int    qualifies_for_high_score_table(int score);
void   pre_level_text(int sector, int level);
void   pre_sector_text(int sector);
int    another_multiplayer_go(void);
void   single_player_dead_screen(void);
void   single_player_end_of_game(void);
void   single_player_end_of_user_game(void);
void   high_score_updater(void);
void   config_save(void);
void   config_load(void);
BOOL   decode_new_format_level_from_mem(ubyte *addr);

/* In enemy.c */
void   init_enemies(void);
void   create_new_enemy(int enemy_type, int xpos, int ypos);
void   update_enemies(void);

/* In menusys.c */
void   ready_for_new_menu(void);
void   init_menu_system(void);
int    add_new_menu_item(char *string, int x, int y, int align);
void   open_menu(void);
void   maintain_menu(void);
void   close_menu(void);
void   close_menu_completely(int stop_music);
void   highlighted_item(int item_id);
void   change_item_text_ptr(int item_id, char *str);
void   remove_menu_item(int item_id);
void   remove_all_items(void);

/* In editor.c */
void   init_editor(void);
void   editor(void);

/* In sfx.c */
void   load_audio_data(void);
void   play_sound(int sound_num);

/* In intro.c */
void   play_intro_sequence(void);
void   help_menu(void);

/* In ai.c */
void   prepare_ai(void);
void   update_ai(ubyte plr);

/* In slink.c */
void  serial_sys_init(void);
BOOL  serial_detect_sync(void);
BOOL  serial_sync_master(void);
ubyte serial_get_byte_wait(int csecs);
BOOL  serial_send_byte_wait(ubyte b, int csecs);
BOOL  serial_sync_pregame_slave(void);
BOOL  serial_sync_pregame_master(void);
void  init_serial_drivers(void);
void  save_serial_choices(void);
void  reset_serial_link(void);
void  serial_poll(void);


#define MENU_MOV_SFX   play_sound(1)
#define MENU_SEL_SFX   play_sound(5)
#define MENU_ALT_SFX   play_sound(5)
#define CHAR_DISP_SFX  play_sound(12)
#define NME_DEATH_SFX  play_sound(4)
#define EXIT_OPEN_SFX  play_sound(15)




