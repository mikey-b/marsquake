/*** Paul's WIMP library ****************************************** H FILE */

/***************************************************************************
 * PLEASE NOTE : This file contains data structures and enumerations from  *
 * an older (pre release 5) version of Acorn C, library header files       *
 * wimp.h and sprite.h                                                     *
 ***************************************************************************/

#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

#ifndef __DEFUBYTE
typedef unsigned char ubyte;
#define __DEFUBYTE
#endif

typedef enum {
  MOUSE_NONE   = 0x00,
  MOUSE_ADJUST = 0x01,
  MOUSE_MENU   = 0x02,
  MOUSE_SELECT = 0x04
} MOUSE_BUTTONS;

typedef enum {                     /* window flag set */

  wimp_WMOVEABLE = 0x00000002,     /* is moveable */
  wimp_REDRAW_OK = 0x00000010,     /* can be redrawn entirely by wimp
                                    * ie. no user graphics */
  wimp_WPANE     = 0x00000020,     /* window is stuck over tool window */
  wimp_WTRESPASS = 0x00000040,     /* window is allowed to go outside
                                    * main area */
  wimp_WSCROLL_R1= 0x00000100,     /* scroll request returned when
                                    * scroll button clicked- auto repeat*/
  wimp_SCROLL_R2 = 0x00000200,     /* as SCROLL_R1, debounced, no auto */
  wimp_REAL_COLOURS = 0x000000400, /* use real window colours. */
  wimp_BACK_WINDOW = 0x000000800,  /* this window is a background window. */
  wimp_HOT_KEYS = 0x000001000,     /* generate events for 'hot keys' */

  wimp_WOPEN  = 0x00010000,        /* window is open */
  wimp_WTOP   = 0x00020000,        /* window is on top (not covered) */
  wimp_WFULL  = 0x00040000,        /* window is full size */
  wimp_WCLICK_TOGGLE = 0x00080000, /* open_window_request was due to click
                                    * on toggle-size button */
  wimp_WFOCUS = 0x00100000,        /* window has input focus */

  wimp_WBACK  = 0x01000000,        /* window has back button */
  wimp_WQUIT  = 0x02000000,        /* has a quit button */
  wimp_WTITLE = 0x04000000,        /* has a title bar */
  wimp_WTOGGLE= 0x08000000,        /* has a toggle-size button */
  wimp_WVSCR  = 0x10000000,        /* has vertical scroll bar */
  wimp_WSIZE  = 0x20000000,        /* has size box */
  wimp_WHSCR  = 0x40000000,        /* has horizontal scroll bar */
  wimp_WNEW   = ~0x7fffffff        /* use these new flags */
                                   /* NB! always set the WNEW flag */
} wimp_wflags;

typedef enum {
  wimp_WCTITLEFORE,
  wimp_WCTITLEBACK,
  wimp_WCWKAREAFORE,
  wimp_WCWKAREABACK,
  wimp_WCSCROLLOUTER,
  wimp_WCSCROLLINNER,
  wimp_WCTITLEHI,
  wimp_WCRESERVED
} wimp_wcolours;
/* If work area background is 255 then it isn't painted. */
/* If title foreground is 255 then you get no borders, title etc. at all */

typedef enum {                      /* icon flag set */
  wimp_ITEXT      = 0x00000001,     /* icon contains text */
  wimp_ISPRITE    = 0x00000002,     /* icon is a sprite */
  wimp_IBORDER    = 0x00000004,     /* icon has a border */
  wimp_IHCENTRE   = 0x00000008,     /* text is horizontally centred */
  wimp_IVCENTRE   = 0x00000010,     /* text is vertically centred */
  wimp_IFILLED    = 0x00000020,     /* icon has a filled background */
  wimp_IFONT      = 0x00000040,     /* text is an anti-aliased font */
  wimp_IREDRAW    = 0x00000080,     /* redraw needs application's help */
  wimp_INDIRECT   = 0x00000100,     /* icon data is 'indirected' */
  wimp_IRJUST     = 0x00000200,     /* text right justified in box */
  wimp_IESG_NOC   = 0x00000400,     /* if selected by right button, don't
                                     * cancel other icons in same ESG */
  wimp_IHALVESPRITE=0x00000800,     /* plot sprites half-size */
  wimp_IBTYPE     = 0x00001000,     /* 4-bit field: button type */
  wimp_ISELECTED  = 0x00200000,     /* icon selected by user (inverted) */
  wimp_INOSELECT  = 0x00400000,     /* icon cannot be selected (shaded) */
  wimp_IDELETED   = 0x00800000,     /* icon has been deleted */
  wimp_IFORECOL   = 0x01000000,     /* 4-bit field: foreground colour */
  wimp_IBACKCOL   = 0x10000000      /* 4-bit field: background colour */
} wimp_iconflags;

/* If the icon contains anti-aliased text then the colour fields
give the font handle: */
#define wimp_IFONTH 0x01000000

typedef enum {                /* button types */
  wimp_BIGNORE,               /* ignore all mouse ops */
  wimp_BNOTIFY,
  wimp_BCLICKAUTO,
  wimp_BCLICKDEBOUNCE,
  wimp_BSELREL,
  wimp_BSELDOUBLE,
  wimp_BDEBOUNCEDRAG,
  wimp_BRELEASEDRAG,
  wimp_BDOUBLEDRAG,
  wimp_BSELNOTIFY,
  wimp_BCLICKDRAGDOUBLE,
  wimp_BCLICKSEL,              /* useful for on/off and radio buttons */
  wimp_BWRITABLE = 15
} wimp_ibtype;

typedef enum {                 /* button state bits */
  wimp_BRIGHT       = 0x001,
  wimp_BMID         = 0x002,
  wimp_BLEFT        = 0x004,
  wimp_BDRAGRIGHT   = 0x010,
  wimp_BDRAGLEFT    = 0x040,
  wimp_BCLICKRIGHT  = 0x100,
  wimp_BCLICKLEFT   = 0x400
} wimp_bbits;

typedef enum {
  wimp_MOVE_WIND = 1,                 /* change position of window */
  wimp_SIZE_WIND = 2,                 /* change size of window */
  wimp_DRAG_HBAR = 3,                 /* drag horizontal scroll bar */
  wimp_DRAG_VBAR = 4,                 /* drag vertical scroll bar */
  wimp_USER_FIXED = 5,                /* user drag box - fixed size */
  wimp_USER_RUBBER = 6,               /* user drag box - rubber box */
  wimp_USER_HIDDEN = 7                /* user drag box - invisible box */
} wimp_dragtype;

/*****************************************************************************/

typedef int wimp_w; /* abstract window handle */
typedef int wimp_i; /* abstract icon handle */
typedef int wimp_t; /* abstract task handle */

typedef union {           /* the data field in an icon */
  char text[12];          /* up to 12 bytes of text */
  char sprite_name[12];   /* up to 12 bytes of sprite name */
  struct {
    char *name;
    void *spritearea;     /* 0->use the common sprite area */
                          /* 1->use the wimp sprite area */
    BOOL nameisname;      /* if FALSE, name is in fact a sprite pointer. */
  } indirectsprite;
  struct {                /* if indirect */
    char *buffer;         /* pointer to text buffer */
    char *validstring;    /* pointer to validation string */
    int bufflen;          /* length of text buffer */
  } indirecttext;
} wimp_icondata;

typedef struct {
  int x0, y0, x1, y1;
} wimp_box;

typedef struct {
  ubyte code;
  ubyte left_lsb;
  ubyte left_msb;
  ubyte bottom_lsb;
  ubyte bottom_msb;
  ubyte right_lsb;
  ubyte right_msb;
  ubyte top_lsb;
  ubyte top_msb;
} mouse_bound;

typedef struct {
  wimp_box box;           /* screen coords of work area */
  int scx, scy;           /* scroll bar positions */
  wimp_w behind;          /* handle to open window behind, or -1 if top */
  wimp_wflags flags;      /* word of flag bits defined above */
  char colours[8];        /* colours: index using wimp_wcolours. */
  wimp_box ex;            /* maximum extent of work area */
  wimp_iconflags titleflags;     /* icon flags for title bar */
  wimp_iconflags workflags;      /* just button type relevant */
  void *spritearea;       /* 0->use the common sprite area */
                          /* 1->use the wimp sprite area */
  int minsize;            /* two 16-bit OS-unit fields, (width/height)
                             giving min size of window. 0->use title. */
  wimp_icondata title;    /* title icon data */
  int nicons;             /* no. of icons in window */
} wimp_wind;
/* If there are any icon definitions, they should follow this structure
immediately in memory. */

typedef struct {          /* result of get_info call. */
  wimp_w w;
  wimp_wind info;
} wimp_winfo;
/* Space for icons must follow. */

typedef struct {          /* icon description structure */
  wimp_box box;           /* bounding box - relative to
                           * window origin (work area top left) */
  wimp_iconflags flags;   /* word of flag bits defined above */
  wimp_icondata data;     /* union of bits & bobs as above */
} wimp_icon;

typedef struct {          /* structure for creating icons. */
  wimp_w w;
  wimp_icon i;
} wimp_icreate;

typedef struct {
  wimp_w w;               /* window handle */
  wimp_box box;           /* position on screen of visible work area */
  int x, y;               /* 'real' coordinates of visible work area */
  wimp_w behind;          /* handle of window to go behind (-1 = top,
                           * -2 = bottom) */
} wimp_openstr;

typedef struct { /* result for window state enquiry */
  wimp_openstr o;
  wimp_wflags flags;
} wimp_wstate;

typedef enum {               /* event types */
  wimp_ENULL,                /* null event */
  wimp_EREDRAW,              /* redraw event */
  wimp_EOPEN,
  wimp_ECLOSE,
  wimp_EPTRLEAVE,
  wimp_EPTRENTER,
  wimp_EBUT,                 /* mouse button change */
  wimp_EUSERDRAG,
  wimp_EKEY,
  wimp_EMENU,
  wimp_ESCROLL,
  wimp_ELOSECARET,
  wimp_EGAINCARET,
  wimp_ESEND = 17,        /* send message, don't worry if it doesn't arrive */
  wimp_ESENDWANTACK = 18, /* send message, return ack if not acknowledged */
  wimp_EACK = 19          /* acknowledge receipt of message. */
} wimp_etype;

typedef enum {               /* event type masks */
  wimp_EMNULL     = 1 << wimp_ENULL,
  wimp_EMREDRAW   = 1 << wimp_EREDRAW,
  wimp_EMOPEN     = 1 << wimp_EOPEN,
  wimp_EMCLOSE    = 1 << wimp_ECLOSE,
  wimp_EMPTRLEAVE = 1 << wimp_EPTRLEAVE,
  wimp_EMPTRENTER = 1 << wimp_EPTRENTER,
  wimp_EMBUT      = 1 << wimp_EBUT,
  wimp_EMUSERDRAG = 1 << wimp_EUSERDRAG,
  wimp_EMKEY      = 1 << wimp_EKEY,
  wimp_EMMENU     = 1 << wimp_EMENU,
  wimp_EMSCROLL   = 1 << wimp_ESCROLL,
  wimp_EMLOSECARET= 1 << wimp_ELOSECARET,
  wimp_EMGAINCARET= 1 << wimp_EGAINCARET,
  wimp_EMSEND     = 1 << wimp_ESEND,
  wimp_EMSENDWANTACK
                  = 1 << wimp_ESENDWANTACK,
  wimp_EMACK      = 1 << wimp_EACK
} wimp_emask;

typedef struct {
  wimp_w w;
  wimp_box box;           /* work area coordinates */
  int scx, scy;           /* scroll bar positions */
  wimp_box g;             /* current graphics window */
} wimp_redrawstr;

typedef struct {
  int x, y;         /* mouse x and y */
  wimp_bbits bbits; /* button state */
  wimp_w w;         /* window handle, or -1 if none */
  wimp_i i;         /* icon handle, or -1 if none */
} wimp_mousestr;

typedef struct {
  wimp_w w;
  wimp_i i;
  int x, y;                /* offset relative to window origin */
  int height;              /* -1 if calc within icon
                            * bit 24 -> VDU-5 type caret
                            * bit 25 -> caret invisible
                            * bit 26 -> bits 16..23 contain colour
                            * bit 27 -> colour is "real" colour */
  int index;               /* position within icon */
} wimp_caretstr;

/* Message action codes are allocated just like SWI codes. */
typedef enum {
  wimp_MCLOSEDOWN    = 0, /* Reply if any dialogue with the user is required,
                             and the closedown sequence will be aborted. */
  wimp_MDATASAVE     = 1, /* request to identify directory */
  wimp_MDATASAVEOK   = 2, /* reply to message type 1 */
  wimp_MDATALOAD     = 3, /* request to load/insert dragged icon */
  wimp_MDATALOADOK   = 4, /* reply that file has been loaded */
  wimp_MDATAOPEN     = 5, /* warning that an object is to be opened */
  wimp_MRAMFETCH     = 6, /* transfer data to buffer in my workspace */
  wimp_MRAMTRANSMIT  = 7, /* I have transferred some data to a buffer in your
                             workspace */
  wimp_MPREQUIT      = 8,
  wimp_PALETTECHANGE = 9,
  wimp_SAVEDESK      = 10, /* Wimp 2.43 onwards - desktop closedown message */
  wimp_MDEVICECLAIM  = 11, /* Broadcast before an application can claim parallel port, RS232 port etc. */
  wimp_MDEVICEINUSE  = 12, /* Reply if another application is already using the device */
  wimp_MDATASAVED    = 13, /* A file previously saved has become 'safe' */

  wimp_FilerOpenDir  = 0x0400,
  wimp_FilerCloseDir = 0x0401,

  wimp_Notify        = 0x40040,  /* net filer notify broadcast */

  wimp_MMENUWARN     = 0x400c0,
  /* menu warning. Sent if wimp_MSUBLINKMSG set. Data sent is:
         submenu field of relevant wimp_menuitem.
         screen x-coord
         screen y-coord
         list of menu selection indices (0..n-1 for each menu)
         terminating -1 word.
     Typical response is to call wimp_create_submenu.
  */
  wimp_MMODECHANGE   = 0x400c1,
  wimp_MINITTASK     = 0x400c2,
  wimp_MCLOSETASK    = 0x400c3,
  wimp_MSLOTCHANGE   = 0x400c4,       /* Slot size has altered */
  wimp_MSETSLOT      = 0x400c5,       /* Task manager requests application
                                         to change its slot size */
  wimp_MTASKNAMERQ   = 0x400c6,       /* Request task name */
  wimp_MTASKNAMEIS   = 0x400c7,       /* Reply to task name request */
  wimp_MTASKSTARTED  = 0x400c8,       /* Broadcast by task to indicate that it has now fully started */

  wimp_MHELPREQUEST  = 0x502,         /* interactive help request */
  wimp_MHELPREPLY    = 0x503,         /* interactive help message */

  /* Messages for dialogue with printer applications */

  wimp_MPrintFile       = 0x80140,    /* Printer app's first response to */
                                      /* a DATASAVE */
  wimp_MWillPrint       = 0x80141,    /* Acknowledgement of PrintFile */
  wimp_MPrintTypeOdd    = 0x80145,    /* Broadcast when strange files */
                                      /* dropped on the printer */
  wimp_MPrintTypeKnown  = 0x80146,    /* Ack to above */
  wimp_MPrinterChange   = 0x80147     /* New printer application installed */

} wimp_msgaction;

typedef struct {          /* message block header. */
  int size;               /* 20<=size<=256, multiple of 4 */
  wimp_t task;            /* task handle of sender (filled in by wimp) */
  int my_ref;             /* unique ref number (filled in by wimp) */
  int your_ref;           /* (0==>none) if non-zero, acknowledge */
  wimp_msgaction action;  /* message action code */
} wimp_msghdr;
/* size is the size of the whole msgstr, see below. */


typedef struct {
  wimp_w w;               /* window in which save occurs. */
  wimp_i i;               /* icon there */
  int x;                  /* position within that window of destination of save. */
  int y;
  int estsize;            /* estimated size of data, in bytes */
  int type;               /* file type of data to save */
  char leaf[12];          /* proposed leaf-name of file, 0-terminated */
} wimp_msgdatasave;

typedef struct {
  /* w, i, x, y, type, estsize copied unaltered from DataSave message. */
  wimp_w w;               /* window in which save occurs. */
  wimp_i i;               /* icon there */
  int x;                  /* position within that window of destination of save. */
  int y;
  int estsize;            /* estimated size of data, in bytes */
  int type;               /* file type of data to save */
  char name[212];         /* the name of the file to save */
} wimp_msgdatasaveok;

typedef struct {
  wimp_w w;               /* target window */
  wimp_i i;               /* target icon */
  int x;                  /* target coords in target window work area */
  int y;
  int size;               /* must be 0 */
  int type;               /* type of file */
  char name[212];         /* the filename follows. */
} wimp_msgdataload;

/* for a data load reply, no arguments are required. */

typedef wimp_msgdataload wimp_msgdataopen;
/* The data provided when opening a file is exactly the same. the
window, x, y refer to the bottom lh corner of the icon that represents the
file being opened, or w=-1 if there is no such. */

typedef struct {             /* transfer data in memory */
  char *addr;                /* address of data to transfer */
  int nbytes;                /* number of bytes to transfer */
} wimp_msgramfetch;

typedef struct {             /* I have transferred some data to a buffer in your workspace */
  char *addr;                /* copy of value sent in RAMfetch */
  int nbyteswritten;         /* number of bytes written */
} wimp_msgramtransmit;

typedef struct {           /* Save state for restart */
  int filehandle;          /* RISC OS file handle (not a C one!) */
} wimp_msgsavedesk;

typedef struct {
  int major;         /* Major device number */
  int minor;         /* Minor device number */
  char information[228];   /* Null-terminated information string */
} wimp_msgdevice;

typedef struct {
  wimp_mousestr m;    /* where the help is required */
} wimp_msghelprequest;

typedef struct {
  char text[200];        /* the helpful string */
} wimp_msghelpreply;

typedef struct {         /* structure used in all print messages */
  int filler[5] ;
  int type ;             /* filetype */
  char name[256-44] ;    /* filename */
} wimp_msgprint ;

typedef struct {          /* message block */
  wimp_msghdr hdr;
  union {
    char chars[236];
    int words[59];             /* max data size. */
    wimp_msgdatasave    datasave;
    wimp_msgdatasaveok  datasaveok;
    wimp_msgdataload    dataload;
    wimp_msgdataopen    dataopen;
    wimp_msgramfetch    ramfetch;
    wimp_msgramtransmit ramtransmit;
    wimp_msghelprequest helprequest;
    wimp_msghelpreply   helpreply;
    wimp_msgprint       print;
    wimp_msgsavedesk    savedesk;
    wimp_msgdevice      device;
  } data;
} wimp_msgstr;

typedef union {
    wimp_openstr o;         /* for redraw, close, enter, leave events */
    struct {
      wimp_mousestr m;
      wimp_bbits b;} but;   /* for button change event */
    wimp_box dragbox;       /* for user drag box event */
    struct {wimp_caretstr c; int chcode;} key;  /* for key events */
    int menu[10];           /* for menu event: terminated by -1 */
    struct {wimp_openstr o; int x, y;} scroll;  /* for scroll request */
                                       /* x=-1 for left, +1 for right */
                                       /* y=-1 for down, +1 for up    */
                             /* scroll by +/-2 -> page scroll request */
    wimp_caretstr c;        /* for caret gain/lose. */
    wimp_msgstr msg;        /* for messages. */
} wimp_eventdata;

typedef struct {            /* wimp event description */
  wimp_etype e;             /* event type */
  wimp_eventdata data;
} wimp_eventstr;

typedef struct {
  char title[12];         /* menu title (optional) */
  char tit_fcol, tit_bcol, work_fcol, work_bcol; /* colours */
  int width, height;      /* size of following menu items */
  int gap;                /* vertical gap between items */
} wimp_menuhdr;

typedef enum {           /* menu item flag set */
  wimp_MTICK       = 1,
  wimp_MSEPARATE   = 2,
  wimp_MWRITABLE   = 4,
  wimp_MSUBLINKMSG = 8, /* show a => flag, and inform program when it
                           is activated. */
  wimp_MLAST = 0x80     /* signal last item in the menu */
} wimp_menuflags;
/* use wimp_INOSELECT to shade the item as unselectable,
and the button type to mark it as writable. */

typedef struct wimp_menustr *wimp_menuptr;
/* Only for the circular reference in menuitem/str. */

typedef struct {
  wimp_menuflags flags;         /* menu entry flags */
  wimp_menuptr submenu;         /* wimp_menustr* pointer to sub menu,
                                   or wimp_w dialogue box,
                                   or -1 if no submenu */
  wimp_iconflags iconflags;     /* icon flags for the entry */
  wimp_icondata data;           /* icon data for the entry */
} wimp_menuitem;
/* submenu can also be a wimp_w, in which case the window is opened as a
dialogue box within the menu tree. */

typedef struct wimp_menustr {
  wimp_menuhdr hdr;
  /* wimp_menuitem item[];*/ /* Zero or more menu items follow in memory */
} wimp_menustr;

typedef struct {
  wimp_w window;
  wimp_dragtype type;
  wimp_box box;           /* initial position for drag box */
  wimp_box parent;        /* parent box for drag box */
} wimp_dragstr;

typedef struct {
  wimp_w window;          /* handle */
  int bit_mask;           /* bit set => consider this bit */
  int bit_set;            /* desired bit setting */
} wimp_which_block;

typedef struct {
  int shape_num;          /* pointer shape number (0 turn off pointer) */
  char * shape_data;      /* shape data, NULL pointer implies existing
                           * shape */
  int width, height;      /* Width and height in pixels. Width = 4 * n,
                           * where n is an integer. */
  int activex, activey;   /* active point (pixels from top left) */
} wimp_pshapestr;

typedef struct {
  char f[256];            /* initialise all to zero before using for
                           * first load_template, then just use
                           * repeatedly without altering */
} wimp_font_array;

typedef struct {               /* template reading structure */
        wimp_wind *buf;        /* pointer to space for putting template in */
        char *work_free;       /* pointer to start of free wimp workspace -
                                * you have to provide the wimp system with
                                * workspace to store its redirected icons in*/
        char *work_end;        /* end of workspace you are offerring to wimp*/
        wimp_font_array *font; /* points to font reference count array, 0
                                * pointer implies fonts not allowed */
        char *name;            /* name to match with (can be wildcarded) */
        int index;             /* pos. in index to search from (0 = start) */
} wimp_template;

typedef union {
  struct {char gcol; char red; char green; char blue;} bytes;
  int word;
} wimp_paletteword;
/* The gcol char (least significant) is a gcol colour except in 8-bpp
modes, when bits 0..2 are the tint and bits 3..7 are the gcol colour. */

typedef struct {
  wimp_paletteword c[16];              /* wimp colours 0..15 */
  wimp_paletteword screenborder, mouse1, mouse2, mouse3;
} wimp_palettestr;

typedef struct {
  int	 riscos_version;
  wimp_t handle;
} PWL_TASK;

typedef char generic_menu;

typedef struct /* Format of a sprite area control block */
{
  int size;       /* Total size of sprite area */
  int number;	  /* Number of sprites in area */
  int sproff;	  /* Offset to first sprite */
  int freeoff;	  /* Offset to first byte of free memory */
} sprite_area;

typedef struct /* Format of a sprite header */
{
  int  next;      /*  Offset to next sprite                */
  char name[12];  /*  Sprite name                          */
  int  width;     /*  Width in words-1      (0..639)       */
  int  height;    /*  Height in scanlines-1 (0..255/511)   */
  int  lbit;      /*  First bit used (left end of row)     */
  int  rbit;      /*  Last bit used (right end of row)     */
  int  image;     /*  Offset to sprite image               */
  int  mask;      /*  Offset to transparency mask          */
  int  mode;      /*  Mode sprite was defined in           */
                  /*  Palette data optionally follows here */
                  /*  in memory                            */
} sprite_header;

typedef enum {
  DAS_HCENTRE = 1,
  DAS_HRIGHT = 2,
  DAS_VCENTRE = 1<<2,
  DAS_VTOP = 2<<2,
  DAS_BOUNDWINDOW = 1<<4,
  DAS_BOUNDBOX = 2<<4,
  DAS_LIMITPOINTER = 1<<6,
  DAS_DROPSHADOW = 1<<7
} DAS_FLAGS;

typedef struct {
  DAS_FLAGS    flags;
  int	       sprite_area;
  char*	       sprite_name;
  wimp_box     box;
  wimp_box     bound;
} dragasprite;

typedef struct {
  wimp_t       src_task;
  void*	       src_buff;
  wimp_t       dst_task;
  void*	       dst_buff;
  int	       len;
} transfer_block;

typedef struct {
  int          action;         /* specifies action of osgbpb */
  int 	       file_handle;    /* file handle, but may be used as a char *
                                * pointing to wildcarded dir-name */
  void*        data_addr;      /* memory address of data */
  int	       number;
  int	       seq_point;
  int	       buf_len;
  char*	       wild_fld;       /* points to wildcarded filename to match */
  int 	       reserved[3];    /* space to allow treatment as reg_block */
} os_gbpb_str;

/*** Paul's WIMP library ****************************************** H FILE */

extern void pwl_wimp_initialise(int version, PWL_TASK *output, char *desc, int *msgs);
extern wimp_w pwl_wimp_createwindow(wimp_wind *window);
extern wimp_i pwl_wimp_createicon(wimp_icreate *icon);
extern void pwl_wimp_deletewindow(wimp_w window_handle);
extern void pwl_wimp_deleteicon(wimp_w window_handle, wimp_i icon_handle);
extern void pwl_wimp_openwindow(wimp_openstr *window);
extern void pwl_wimp_closewindow(wimp_w window_handle);
extern int  pwl_wimp_poll(wimp_emask mask, wimp_eventstr *event_data);
extern void pwl_wimp_closedown(PWL_TASK *task);
extern void pwl_wimp_createmenu(generic_menu *menu, int x, int y);
extern void pwl_wimp_opentemplate(char *filename);
extern void pwl_wimp_closetemplate(void);
extern BOOL pwl_wimp_loadtemplate(wimp_template *temp);
extern void pwl_wimp_sendmessage(wimp_etype event, wimp_msgstr *msg, wimp_t t, wimp_i i);
extern void pwl_del_scrap(void);
extern void pwl_wimp_forceredraw(wimp_redrawstr *area);
extern void pwl_wimp_seticonstate(wimp_w win, wimp_i icon, int eorword, int clearword);
extern void pwl_wimp_getwindowstate(wimp_openstr *data);
extern BOOL pwl_wimp_updatewindow(wimp_redrawstr *redraw);
extern BOOL pwl_wimp_redrawwindow(wimp_redrawstr *redraw);
extern BOOL pwl_wimp_getrectangle(wimp_redrawstr *redraw);
extern void pwl_wimp_dragbox(wimp_dragstr *draginfo);
extern void pwl_wimp_getpointerinfo(wimp_mousestr *m);
extern void pwl_dragasprite_start(dragasprite *das);
extern void pwl_dragasprite_stop(void);
extern void pwl_wimp_transferblock(transfer_block *tb);
extern void pwl_wimp_setcaretposition(wimp_caretstr *caret);
extern void pwl_wimp_getcaretposition(wimp_caretstr *caret);
extern int  pwl_os_readmodevariable(int mode, int var);
extern void pwl_mouse_confine(mouse_bound *b);
extern void pwl_wimp_setextent(wimp_w handle, wimp_box *b);
extern void pwl_oscli(char *command);
extern void pwl_wimp_getwindowoutline(wimp_redrawstr *b);
extern void pwl_wimp_processkey(int keycode);
extern int  pwl_getwimpmode(void);
extern void pwl_setwimpmode(int mode);

extern void pwl_os_gbpb(os_gbpb_str *d);


