/**************************************************************************
** Marsquake menu system support
*/

#include "mqhead.h"

/**************************************************************************
** Menu system data types
*/

typedef struct {
  char	*text;
  int	len;
  int	anim;
  int	x;
  int	y;
  int	alignment;
  int	operation;
  int	col;
} MENU_ITEM;

#define OPENING_MENU 0
#define CLOSING_MENU 1

/**************************************************************************
** Menu system variables and workspace
*/

/* Array of menu items - options/title/info/whatever */
MENU_ITEM menu_item_list[64];

/* How many items are in use */
int menu_items;

/* Which item is highlighted? */
int h_item;

/**************************************************************************
** Menu system support routines
*/

void ready_for_new_menu(void)
{
  /* Initialise variables for new menu */
  menu_items = 0;
  h_item = -1;
}

void init_menu_system(void)
{
  /* Initialise all menu items as unallocated */
  int i;

  for (i=0; i<64; i++) {
    menu_item_list[i].len = -1;
  }
}

int alloc_new_menu_item(void)
{
  int i;

  for (i=0; i<64; i++) {
    if (menu_item_list[i].len==-1) {
      /* We've found an empty menu item slot */
      return i;
    }
  }

  return -1;
}

void remove_menu_item(int item_id)
{
  if (menu_item_list[item_id].operation != CLOSING_MENU) {
    menu_item_list[item_id].operation = CLOSING_MENU;
    menu_item_list[item_id].anim += rnd_unsync()&15;
  }
}

int add_new_menu_item(char *string, int x, int y, int align_col)
{
  /* Adds a menu item, specifying the string to be displayed
  ** Returns item identifier
  */
  int i, align, col;

  align = align_col&0xf0;
  col = align_col&15;

  i = alloc_new_menu_item();

  if (align&ICON) {
    /* Align icon */
    switch (align&ALIGNMENT_MASK) {
      case CENTRE :
        menu_item_list[i].x = 160 - (menu_icon[(int) string].width>>1);
        break;
      case RIGHT_ALIGN :
        menu_item_list[i].x = x - menu_icon[(int) string].width;
        break;
      default :
        menu_item_list[i].x = x;
    }

    align = SYS_ICON;
  }
  else {
    menu_item_list[i].x    = x;
  }

  menu_item_list[i].y	 = y;
  menu_item_list[i].len  = (align!=SYS_ICON) ? get_string_width(string):48;
  menu_item_list[i].text = string;
  menu_item_list[i].anim = -(rnd_unsync()&15);
  menu_item_list[i].alignment = align;
  menu_item_list[i].col	 = col;

  menu_item_list[i].operation = OPENING_MENU;

  return (i);
}

void display_item(int item_id)
{
  int space, n, x,y, space2;

  y = menu_item_list[item_id].y-1;
  n = menu_item_list[item_id].anim;
  space = menu_item_list[item_id].len;

  switch (menu_item_list[item_id].operation) {
    case OPENING_MENU :
      if (n<100) {
        menu_item_list[item_id].anim++;
        if (n==64) dsym_playinstr(2);
      }

      if (fast_menu) {
        if (n!=100) {
          menu_item_list[item_id].anim = 100;
          dsym_playinstr(2);
        }
      }

      break;

    case CLOSING_MENU :
      menu_item_list[item_id].anim--;

      if (menu_item_list[item_id].anim<=0) {
        /* Deallocate this item */
        menu_item_list[item_id].len = -1;
      }
      else {
        if (menu_item_list[item_id].anim==32) {
          dsym_playinstr(13);
        }
      }

      if (fast_menu) {
        if (n!=0) {
          menu_item_list[item_id].anim=0;
          dsym_playinstr(13);
        }
      }

      break;
  }

  /* Are we ready to display the menu item..? */
  if (n<=0) return;

  switch (menu_item_list[item_id].alignment) {
    case LEFT_ALIGN :
      x = menu_item_list[item_id].x;

      if (n<32) {
        if (n&4) mqprint("{}",x-8,y,LEFT_ALIGN,0);
      }
      else if (n<64) {
        mqprint("{",x-8,y,LEFT_ALIGN,0);
        mqprint("}",x+((space*(n-32))>>5),y,LEFT_ALIGN,0);
      }
      else {
        if ((n&4) && n<96) {
          mqprint("{",x-8,y,LEFT_ALIGN,0);
          mqprint("}",x+space,y,LEFT_ALIGN,0);
        }
        mqprint(menu_item_list[item_id].text,x,y+1,
        	LEFT_ALIGN,
        	(item_id==h_item) ? HIGHLIGHT:menu_item_list[item_id].col);
      }

      break;

    case CENTRE :
      x = 160;

      if (n<32) {
        if (n&4) mqprint("{}",x,y,CENTRE,0);
      }
      else if (n<64) {
        space = (space*(n-32))>>6;
        mqprint("{",(x-space)-8,y,LEFT_ALIGN,0);
        mqprint("}",x+space,y,LEFT_ALIGN,0);
      }
      else {
        if ((n&4) && n<96) {
          mqprint("{",x-(space>>1)-8,y,LEFT_ALIGN,0);
          mqprint("}",x+(space>>1),y,LEFT_ALIGN,0);
        }
        mqprint(menu_item_list[item_id].text,x,y+1,CENTRE,
        	(item_id==h_item) ? HIGHLIGHT:menu_item_list[item_id].col);
      }

      break;

    case RIGHT_ALIGN :
      x = menu_item_list[item_id].x;

      if (n<32) {
        if (n&4) mqprint("{}",x-8,y,LEFT_ALIGN,0);
      }
      else if (n<64) {
        mqprint("{",x-((space*(n-32))>>5)-8,y,LEFT_ALIGN,0);
        mqprint("}",x,y,LEFT_ALIGN,0);
      }
      else {
        if ((n&4) && n<96) {
          mqprint("{",x-space-8,y,LEFT_ALIGN,0);
          mqprint("}",x,y,LEFT_ALIGN,0);
        }
        mqprint(menu_item_list[item_id].text,x,y+1,
        	RIGHT_ALIGN,
        	(item_id==h_item) ? HIGHLIGHT:menu_item_list[item_id].col);
      }

      break;

    case SYS_ICON :
     space  = menu_icon[(int)menu_item_list[item_id].text].width;
     space2 = menu_icon[(int)menu_item_list[item_id].text].height;

     x = menu_item_list[item_id].x + (space>>1);
     y+= (space2>>1);

     if (n<32) {
       if (n&4) {
         mqprint("|",x-4,y-4,LEFT_ALIGN,0);
         mqprint("~",x-5,y-5,LEFT_ALIGN,0);
       }
     }
     else if (n<64) {
       space = (space*(n-32))>>6;
       space2 = (space2*(n-32))>>6;
       mqprint("|",(x-space)-4,(y-space2)-4,LEFT_ALIGN,0);
       mqprint("~",x+space-5,y+space2-5,LEFT_ALIGN,0);
     }
     else {
       if ((n&4) && n<96) {
         mqprint("|",x-(space>>1)-4,(y-(space2>>1))-4,LEFT_ALIGN,0);
         mqprint("~",x+(space>>1)-5,y+(space2>>1)-5,LEFT_ALIGN,0);
       }
       if (screenres == MODE_13) {
         draw_icon((int)menu_item_list[item_id].text,
       		  x-(space>>1),y-(space2>>1));
       }
       else {
         H_draw_icon((int)menu_item_list[item_id].text,
       		  x-(space>>1),y-(space2>>1));
       }
     }

     break;
  }
}

void open_menu(void)
{
  int item;
  int ready;

  do {
    draw_menu_screen();

    ready = 1;

    for (item=0; item<64; item++) {
      if (menu_item_list[item].len!=-1) {
        display_item(item);
        if (menu_item_list[item].operation==OPENING_MENU &&
            menu_item_list[item].anim<99) ready = 0;
      }
    }

    swapscreen();
  } while (!ready);
}

void maintain_menu(void)
{
  int item;

  for (item=0; item<64; item++) {
    if (menu_item_list[item].len!=-1) display_item(item);
  }
}

void close_menu(void)
{
  int item;
  int ready;

  for (item=0; item<64; item++) {
    if (menu_item_list[item].len!=-1) remove_menu_item(item);
  }

  do {
    draw_menu_screen();

    ready = 1;

    for (item=0; item<64; item++) {
      if (menu_item_list[item].len!=-1) {
        if (menu_item_list[item].operation==CLOSING_MENU &&
            menu_item_list[item].anim>=64) ready=0;

        display_item(item);
      }
    }

    swapscreen();
  } while (!ready);
}

void remove_all_items(void)
{
  int item;

  for (item=0; item<64; item++) {
    menu_item_list[item].len = -1;
  }
}

void close_menu_completely(int stop_music)
{
  int item;
  int ready;

  for (item=0; item<64; item++) {
    if (menu_item_list[item].len!=-1) remove_menu_item(item);
  }

  do {
    draw_menu_screen();

    ready = 1;

    for (item=0; item<64; item++) {
      if (menu_item_list[item].len!=-1) {
        if (menu_item_list[item].operation==CLOSING_MENU) ready=0;
        display_item(item);
      }
    }

    if (stop_music) {
      /* Wait also for volume to reach 0 */
      if (dsym_monitor_volume(0)) ready=0;
    }
    swapscreen();
  } while (!ready);

  if (stop_music) {
    dsym_stop_song();
  }
}

void highlighted_item(int item_id)
{
  h_item = item_id;
}

void change_item_text_ptr(int item_id, char *str)
{
  menu_item_list[item_id].text = str;
  menu_item_list[item_id].len  = get_string_width(str);
}

